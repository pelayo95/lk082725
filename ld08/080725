import React, { useState, useEffect, useContext, createContext, useMemo, useCallback, useRef } from 'react';
import { 
    LogIn, LogOut, Briefcase, Building, Users, User, Plus, Trash, Edit, ChevronLeft, 
    ChevronRight, X, Info, Calendar, Clock, 
    CheckCircle, AlertCircle, XCircle, MessageSquare, Shield, ListChecks, 
    ClipboardList, History, Settings, LayoutDashboard, Send, Search, FolderOpen, 
    FileText, RotateCcw, Package, Paperclip, Activity, Bell
} from 'lucide-react';

// Polyfill for uuidv4 to ensure self-containment without external libraries
const uuidv4 = () => {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
};

// ===============================================================================================
// APP-WIDE UTILITIES
// ===============================================================================================
const getUserNameById = (userId, allUsers) => {
    if (!userId || !allUsers) return "N/A";
    const user = allUsers.find(u => u.uid === userId);
    return user?.name || "N/A";
};


// ===============================================================================================
// FEATURE DEFINITIONS FOR PLANS
// ===============================================================================================

const allFeatures = [
    { 
        section: "Denunciante", 
        module: "Denuncia y seguimiento", 
        features: [
            { key: "formularioDenuncia", label: "Formulario de Denuncia", description: "Proceso guiado multi-paso para ingresar una denuncia. Es 100% personalizable por cada empresa desde su panel de configuración." },
            { key: "generacionCredenciales", label: "Generación de Credenciales", description: "Al finalizar la denuncia, el sistema genera automáticamente un Código de Caso y una Contraseña única de 6 dígitos." },
            { key: "portalSeguimiento", label: "Portal de Seguimiento", description: "Una sección de acceso restringido donde el denunciante puede ingresar con sus credenciales para consultar el estado de su caso." },
            { key: "visualizacionEstado", label: "Visualización de Estado", description: "El denunciante puede ver la etapa actual en la que se encuentra su caso, la cual se actualiza dinámicamente según el progreso en la línea de tiempo del gestor." },
            { key: "visualizacionMedidas", label: "Visualización de Medidas", description: "Muestra las medidas de resguardo que se han implementado y están vigentes en su caso." },
            { key: "canalComunicacionDenunciante", label: "Canal de Comunicación", description: "Un chat seguro y directo con los gestores del caso para solicitar información o aportar nuevos antecedentes." }
        ]
    },
    {
        section: "Portal de administración",
        module: "Dashboard Principal",
        features: [
            { key: "kpisYMetricas", label: "KPIs y Métricas", description: "Visualización de indicadores clave: total de casos, casos abiertos, en investigación, cerrados y tiempo promedio de resolución." },
            { key: "graficos", label: "Gráficos", description: "Gráficos de barras que muestran denuncias por estado y por gravedad." },
            { key: "filtrosAvanzados", label: "Filtros Avanzados", description: "Búsqueda por ID de caso, nombre, palabra clave y rango de fechas." },
            { key: "agendaSemanal", label: "Agenda Semanal", description: "Calendario que muestra las gestiones programadas por semana, con filtro por investigador." }
        ]
    },
    {
        section: "Portal de administración",
        module: "Gestión de Casos",
        features: [
            { key: "asignacionInvestigadores", label: "Asignación de Investigadores", description: "Permite asignar uno o más investigadores (con rol 'investigador' o 'admin') a cada caso." },
            { key: "edicionDenuncias", label: "Edición de Denuncias", description: "Los campos de la denuncia pueden ser editados por los gestores. Se mantiene un registro del valor original, que se puede consultar y revertir." },
            { key: "definicionFlujo", label: "Definición de Flujo", description: "Panel para configurar el flujo de la investigación: 'Recibida internamente' o 'Notificada por DT'." },
            { key: "planGestion", label: "Plan de Gestión", description: "Creación, asignación y seguimiento de tareas específicas con fechas de vencimiento." },
            { key: "gestionArchivos", label: "Gestión de Archivos", description: "Permite subir y clasificar documentos asociados al caso." },
            { key: "gestionSanciones", label: "Gestión de Sanciones", description: "Permite registrar y gestionar las sanciones aplicadas en un caso." },
            { key: "lineaTiempoDinamica", label: "Línea de Tiempo Dinámica", description: "El timeline se adapta al flujo definido y permite marcar etapas como completadas." },
            { key: "gestionMedidas", label: "Gestión de Medidas", description: "Creación y administración de medidas de resguardo para los involucrados." },
            { key: "comunicacionConDenunciante", label: "Comunicación con Denunciante", description: "Chat seguro y exclusivo para comunicarse con el denunciante." },
            { key: "comentariosInternos", label: "Comentarios Internos", description: "Chat privado, visible solo para los gestores del caso." },
            { key: "auditoriaCompleta", label: "Auditoría Completa", description: "Registro inmutable y detallado de cada acción realizada en el caso." }
        ]
    },
    {
        section: "Portal de administración",
        module: "Configuración",
        features: [
             { key: "gestionUsuarios", label: "Gestión de Usuarios", description: "El administrador puede crear nuevos usuarios con roles de 'Administrador' o 'Investigador'." },
             { key: "constructorFormularios", label: "Constructor de Formularios", description: "Permite crear, editar y reordenar los pasos y campos del formulario de denuncia." },
             { key: "constructorLineasTiempo", label: "Constructor de Líneas de Tiempo", description: "Permite configurar de forma independiente las etapas, sub-etapas y plazos para los 3 flujos de investigación." },
             { key: "plazosSubEtapas", label: "Plazos de Sub-etapas", description: "Posibilidad de asignar duraciones y tipos de días a cada sub-etapa." },
             { key: "medidasPorDefecto", label: "Gestión de Medidas por Defecto", description: "Permite a cada empresa crear su propia lista de medidas de resguardo predefinidas." }
        ]
    }
];

const allFeatureKeys = allFeatures.flatMap(section => section.features.map(f => f.key));
const defaultFeaturesState = allFeatureKeys.reduce((acc, key) => ({ ...acc, [key]: false }), {});


// ===============================================================================================
// DEFAULT CONFIGURATION FOR NEW COMPANIES
// ===============================================================================================
const defaultConfig = {
    formSteps: [
        { id: "s1", title: "Tipo de Conducta", description: "Seleccione el tipo de conducta que desea denunciar.", fields: [
            { id: "f1", label: "Tipo de Conducta", type: "radio", dataKey: "case.type", required: true, options: ["Acoso Sexual", "Acoso Laboral", "Violencia en el Trabajo"], description: "Elija una opción." }
        ]},
        { id: "s2", title: "Identificación del Denunciante", description: "Sus datos son confidenciales y no serán revelados al denunciado.", fields: [
            { id: "f2", label: "Nombre Completo", type: "text", dataKey: "complainant.name", required: false, description: "", editableOnManage: true },
            { id: "f2a", label: "RUT", type: "rut", dataKey: "complainant.rut", required: false, description: "", editableOnManage: true },
            { id: "f3", label: "Correo Electrónico", type: "email", dataKey: "complainant.email", required: false, description: "", editableOnManage: true },
            { id: "f4", label: "Cargo / Puesto de Trabajo", type: "text", dataKey: "complainant.position", required: false, description: "", editableOnManage: true },
        ]},
        { id: "s3", title: "Identificación de la Persona Denunciada", description: "Indique quiénes son las personas involucradas.", fields: [
             { id: 'f5', label: 'Personas Denunciadas', type: 'accusedPersons', dataKey: 'accusedPersons', required: true, description: 'Puede añadir una o más personas.' }
        ]},
        { id: "s4", title: "Descripción de los Hechos", description: "Relate de forma clara y cronológica los hechos. Indique fechas, lugares y cualquier detalle relevante.", fields: [
            { id: "f7", label: "Descripción de los hechos", type: "textarea", dataKey: "facts.description", required: true, description: "", editableOnManage: true },
            { id: "f8", label: "Fecha aproximada del último hecho", type: "date", dataKey: "facts.date", required: false, description: "", editableOnManage: true },
            { id: "f9", label: "Lugar donde ocurrieron los hechos", type: "text", dataKey: "facts.place", required: false, description: "", editableOnManage: true },
        ]},
        { id: "s5", title: "Testigos y Medios de Prueba", description: "Mencione a posibles testigos y cualquier prueba que respalde su denuncia.", fields: [
             { id: "f10", label: "Testigos", type: "witnesses", dataKey: "evidence.witnesses", required: false, description: "Añada las personas que presenciaron los hechos.", editableOnManage: false },
             { id: "f11", label: "Archivos adjuntos", type: "documents", dataKey: "evidence.files", required: false, description: "Adjunte documentos o imágenes como evidencia.", editableOnManage: false },
        ]},
    ],
    timelineSettings: {
        interna: [
            { id: "ti1", name: "Recepción de denuncia", duration: 0, dayType: 'corridos', countFrom: 'case-start' },
            { id: "ti2", name: "Gestiones iniciales", duration: 5, dayType: 'habiles-administrativos', countFrom: 'previous-stage-end', subSteps: [
                { id: "sub1", name: "Designar investigadores", duration: 1, dayType: 'habiles-administrativos' },
                { id: "sub2", name: "Notificar recepción de denuncia", duration: 1, dayType: 'habiles-administrativos' },
                { id: "sub3", name: "Informar al denunciado sobre la denuncia", duration: 1, dayType: 'habiles-administrativos' },
                { id: "sub4", name: "Determinar medidas de resguardo", duration: 1, dayType: 'habiles-administrativos' },
                { id: "sub5", name: "Notificar medidas a partes/DT/organismo", duration: 1, dayType: 'habiles-administrativos' },
            ]},
            { id: "ti3", name: "Investigación", duration: 30, dayType: 'habiles-administrativos', countFrom: 'previous-stage-end', subSteps: [
                { id: "sub6", name: "Entrevistar a denunciante", duration: 5, dayType: 'habiles-administrativos' },
                { id: "sub7", name: "Entrevistar a denunciado", duration: 5, dayType: 'habiles-administrativos' },
                { id: "sub8", name: "Entrevistar a testigos", duration: 10, dayType: 'habiles-administrativos' },
                { id: "sub9", name: "Revisar prueba aportada", duration: 5, dayType: 'habiles-administrativos' },
                { id: "sub10", name: "Revisar documentación laboral", duration: 5, dayType: 'habiles-administrativos' },
            ] },
            { id: "ti4", name: "Redacción y envío de informe", duration: 2, dayType: 'habiles-administrativos', countFrom: 'previous-stage-end' },
            { id: "ti5", name: "Revisión por Inspección del Trabajo", duration: 30, dayType: 'habiles-administrativos', countFrom: 'previous-stage-end' },
            { id: "ti6", name: "Aplicación de sanciones y medidas", duration: 15, dayType: 'corridos', countFrom: 'previous-stage-end' }
        ],
        derivada: [
            { id: "td1", name: "Recepción de la denuncia", duration: 0, dayType: 'corridos', countFrom: 'case-start' },
            { id: "td2", name: "Gestiones iniciales y derivación", duration: 5, dayType: 'habiles-administrativos', countFrom: 'previous-stage-end', subSteps: [
                { id: "sub11", name: "Notificar recepción", duration: 1, dayType: 'habiles-administrativos' },
                { id: "sub12", name: "Informar al denunciado", duration: 1, dayType: 'habiles-administrativos' },
                { id: "sub13", name: "Determinar medidas de resguardo", duration: 1, dayType: 'habiles-administrativos' },
                { id: "sub14", name: "Notificar/derivar a partes/DT/organismo", duration: 2, dayType: 'habiles-administrativos' },
            ]},
            { id: "td3", name: "Investigación por parte de la DT", duration: 30, dayType: 'habiles-administrativos', countFrom: 'previous-stage-end' },
            { id: "td4", name: "Aplicación de sanciones y medidas", duration: 15, dayType: 'corridos', countFrom: 'previous-stage-end' }
        ],
        notificada: [
            { id: "tn1", name: "Recepción de notificación DT", duration: 0, dayType: 'corridos', countFrom: 'reception-date' },
            { id: "tn2", name: "Aplicación y comunicación de medidas", duration: 3, dayType: 'habiles-administrativos', countFrom: 'day-zero' },
            { id: "tn3", name: "Investigación por parte de la IT", duration: 30, dayType: 'habiles-administrativos', countFrom: 'complaint-date' },
            { id: "tn4", name: "Aplicación de sanciones y medidas", duration: 15, dayType: 'corridos', countFrom: 'previous-stage-end' }
        ]
    },
    defaultSafeguardMeasures: [
        "Separación de espacios físicos entre las partes.",
        "Teletrabajo para la persona denunciante.",
        "Redistribución del tiempo de jornada.",
        "Prohibición de contacto entre las partes.",
        "Rotación de turnos o puestos de trabajo."
    ]
};

// ===============================================================================================
// MOCK DATA - Simulates a database
// ===============================================================================================
const initialData = {
  holidays: [
    '2025-01-01', '2025-04-18', '2025-05-01', '2025-05-21', '2025-06-29',
    '2025-07-16', '2025-08-15', '2025-09-18', '2025-09-19', '2025-10-12', 
    '2025-10-27', '2025-10-31', '2025-12-08', '2025-12-25'
  ],
  plans: [
    { 
        id: 'plan-profesional', 
        name: 'Profesional', 
        features: { ...defaultFeaturesState, ...Object.fromEntries(allFeatureKeys.map(k => [k, true])) }
    },
  ],
  companies: [
    { id: "empresa-a", name: "Empresa A", legalName: "Empresa A S.A.", rut: "76.123.456-7", address: "Av. Siempre Viva 123", abbreviation: "EMPA", commercialContact: {name: 'Juan Perez', rut: '12.345.678-9', position: 'Gerente Comercial', phone: '+56912345678', email: 'juan.perez@emp-a.com'}, admin: "admin-a@ejemplo.com", status: "activo", planId: 'plan-profesional' },
  ],
  users: [
    { uid: "boss1", email: "boss@ejemplo.com", role: "boss", companyId: null, name: "Super Admin", password: "password", lastVisited: {} },
    { uid: "adminA1", email: "admin-a@ejemplo.com", role: "admin", companyId: "empresa-a", name: "Admin A", password: "password", rut: '1.111.111-1', position: 'Gerente RRHH', phone: '+56911111111', lastVisited: {} },
  ],
  complaints: [
     {
      id: "CASO-001", companyId: "empresa-a", password: "123", status: "Cerrada", severity: "Leve",
      createdAt: "2025-04-10T09:00:00Z", closedAt: "2025-05-20T10:00:00Z", investigatorIds: ["adminA1"],
      receptionType: 'interna', internalAction: 'investigar', originalData: { case: { type: "Violencia en el Trabajo" }, complainant: { name: "Carlos Soto" }, accusedPersons: [{id: uuidv4(), name: 'Supervisor X', position: 'Supervisor', dependency: 'Gerencia', employeeType: 'Trabajador de mi misma empresa', employerName: ''}] },
      editedData: {}, managements: [], safeguardMeasures: [], internalComments: [], auditLog: [], timelineProgress: {}, caseFiles: [], sanctions: [], otherMeasures: [],
      chatMessages: [ { id: uuidv4(), text: 'Hemos recibido su caso, en breve nos pondremos en contacto.', senderId: 'adminA1', senderName: 'Admin A', timestamp: '2025-04-10T10:00:00Z' } ]
    },
  ],
  configurations: {
    "empresa-a": defaultConfig,
  }
};


// ===============================================================================================
// UTILITY FUNCTIONS & HOOKS
// ===============================================================================================

const isHoliday = (date, holidays) => {
    const dateString = date.toISOString().split('T')[0];
    return holidays.includes(dateString);
};

const calculateEndDate = (startDate, duration, dayType, holidays) => {
    if (isNaN(duration) || duration <= 0 || dayType === 'sin-plazo') return new Date(startDate);
    
    let currentDate = new Date(startDate);
    let daysAdded = 0;
    
    while (daysAdded < duration) {
        currentDate.setDate(currentDate.getDate() + 1);
        if (dayType === 'habiles-administrativos' || dayType === 'habiles-judiciales') {
             const dayOfWeek = currentDate.getDay();
            if (dayOfWeek !== 0 && dayOfWeek !== 6 && !isHoliday(currentDate, holidays)) {
                daysAdded++;
            }
        } else { // 'corridos'
            daysAdded++;
        }
    }
    return currentDate;
};


/**
 * A simple hook for managing data in localStorage.
 */
function useLocalStorage(key, initialValue) {
  const [storedValue, setStoredValue] = useState(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error(error);
      return initialValue;
    }
  });

  const setValue = (value) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      window.localStorage.setItem(key, JSON.stringify(valueToStore));
    } catch (error) {
      console.error(error);
    }
  };

  return [storedValue, setValue];
}

/**
 * Function to set a value in a nested object based on a dot-notation key.
 */
const setNestedValue = (obj, path, value) => {
    const keys = path.split('.');
    let current = obj;
    for (let i = 0; i < keys.length - 1; i++) {
        if (!current[keys[i]]) {
            current[keys[i]] = {};
        }
        current = current[keys[i]];
    }
    current[keys[keys.length - 1]] = value;
    return obj;
};

/**
 * Function to get a value from a nested object based on a dot-notation key.
 */
const getNestedValue = (obj, path) => {
    if (!path) return undefined;
    return path.split('.').reduce((acc, key) => acc && acc[key], obj);
};

const useDashboardAnalytics = ({ companyComplaints, searchQuery, startDate, endDate }) => {
    const filteredComplaints = useMemo(() => {
        return companyComplaints.filter(c => {
            const complaintDate = new Date(c.createdAt);
            const start = startDate ? new Date(startDate) : null;
            const end = endDate ? new Date(endDate) : null;
            
            if (start) start.setHours(0, 0, 0, 0);
            if (end) end.setHours(23, 59, 59, 999);

            if (start && complaintDate < start) return false;
            if (end && complaintDate > end) return false;

            const query = searchQuery.toLowerCase();
            if (query && !(
                c.id.toLowerCase().includes(query) ||
                (getNestedValue(c.originalData, 'complainant.name') || '').toLowerCase().includes(query) ||
                (c.originalData.accusedPersons || []).some(p => (p.name || '').toLowerCase().includes(query)) ||
                (getNestedValue(c.originalData, 'facts.description') || '').toLowerCase().includes(query)
            )) {
                return false;
            }
            
            return true;
        });
    }, [companyComplaints, searchQuery, startDate, endDate]);
    
    const kpis = useMemo(() => {
        const totalCases = filteredComplaints.length;
        const openCases = filteredComplaints.filter(c => c.status === 'Ingresada').length;
        const inProgressCases = filteredComplaints.filter(c => c.status === 'En Investigación').length;
        const closedCases = filteredComplaints.filter(c => c.status === 'Cerrada').length;
        
        const resolvedCases = filteredComplaints.filter(c => c.status === 'Cerrada' && c.closedAt);
        const totalResolutionTime = resolvedCases.reduce((acc, c) => {
            const start = new Date(c.createdAt).getTime();
            const end = new Date(c.closedAt).getTime();
            return acc + (end - start);
        }, 0);
        
        const avgResolutionDays = resolvedCases.length > 0
            ? Math.round(totalResolutionTime / resolvedCases.length / (1000 * 60 * 60 * 24))
            : 0;

        return { totalCases, openCases, inProgressCases, closedCases, avgResolutionDays };
    }, [filteredComplaints]);

    const statusData = useMemo(() => {
        const counts = filteredComplaints.reduce((acc, c) => {
            acc[c.status] = (acc[c.status] || 0) + 1;
            return acc;
        }, {});
        return Object.entries(counts).map(([label, value]) => ({ label, value }));
    }, [filteredComplaints]);

    const severityData = useMemo(() => {
        const counts = filteredComplaints.reduce((acc, c) => {
            acc[c.severity] = (acc[c.severity] || 0) + 1;
            return acc;
        }, {});
        return Object.entries(counts).map(([label, value]) => ({ label, value }));
    }, [filteredComplaints]);

    return { filteredComplaints, kpis, statusData, severityData };
};

const useAlerts = (complaints, user) => {
    const alerts = useMemo(() => {
        if(!user) return [];
        const now = new Date();
        const threeDaysFromNow = new Date(now.getTime() + (3 * 24 * 60 * 60 * 1000));

        const lastVisited = user.lastVisited || {};

        const allAlerts = [];

        complaints.forEach(c => {
            const lastVisitTimestamp = new Date(lastVisited[c.id] || 0);
            const isUserInvestigator = c.investigatorIds.includes(user.uid);

            // 1. New case alert (for admins until assigned)
            if (user.role === 'admin' && c.status === "Ingresada" && c.investigatorIds.length === 0) {
                allAlerts.push({ id: `new-${c.id}`, type: 'new_case', text: `Nuevo caso sin asignar: ${c.id}`, caseId: c.id, date: c.createdAt });
            }

            // 2. New assignment alert
            const assignmentLog = c.auditLog.find(log => log.action.includes('Caso asignado a:') && new Date(log.timestamp) > lastVisitTimestamp);
            if(assignmentLog && c.investigatorIds.includes(user.uid)) {
                allAlerts.push({ id: `assign-${c.id}`, type: 'assignment', text: `Has sido asignado al caso ${c.id}`, caseId: c.id, date: assignmentLog.timestamp });
            }
            
            if(isUserInvestigator) {
                 // 3. Upcoming deadlines
                (c.managements || []).forEach(m => {
                    if (m.dueDate && !m.completed) {
                        const dueDate = new Date(m.dueDate + "T23:59:59");
                        if (dueDate <= threeDaysFromNow && dueDate > now) {
                             allAlerts.push({ id: `due-${m.id}`, type: 'deadline', text: `Plazo por vencer para gestión en caso ${c.id}`, caseId: c.id, date: m.dueDate });
                        }
                    }
                });

                // 4. New activity
                const latestMessage = (c.chatMessages || []).slice(-1)[0];
                if(latestMessage && new Date(latestMessage.timestamp) > lastVisitTimestamp && latestMessage.senderId !== user.uid) {
                    allAlerts.push({ id: `activity-msg-${c.id}`, type: 'activity', text: `Nuevo mensaje en el caso ${c.id}`, caseId: c.id, date: latestMessage.timestamp });
                }
            }
        });
        
        return allAlerts.sort((a,b) => new Date(b.date) - new Date(a.date));

    }, [complaints, user]);

    return alerts;
};


// ===============================================================================================
// CONTEXTS
// ===============================================================================================

// --- Notification Context ---
const NotificationContext = createContext();
const useNotification = () => useContext(NotificationContext);

const NotificationProvider = ({ children }) => {  
  const [toasts, setToasts] = useState([]);

  const addToast = useCallback((message, type = 'info') => {
    const id = uuidv4();
    setToasts(prev => [...prev, { id, message, type }]);
    setTimeout(() => {
      setToasts(prev => prev.filter(toast => toast.id !== id));
    }, 5000);
  }, []);
  
  const toastStyles = {
    success: 'bg-emerald-500 border-emerald-600',
    error: 'bg-red-500 border-red-600',
    warning: 'bg-amber-500 border-amber-600',
    info: 'bg-sky-500 border-sky-600',
  };
  
  const toastIcons = {
    success: <CheckCircle className="w-5 h-5"/>,
    error: <XCircle className="w-5 h-5"/>,
    warning: <AlertCircle className="w-5 h-5"/>,
    info: <Info className="w-5 h-5"/>,
  }

  return (
    <NotificationContext.Provider value={{ addToast }}>
      {children}
      <div className="fixed top-5 right-5 z-50 space-y-2">
        {toasts.map(toast => (
          <div key={toast.id} className={`flex items-center gap-3 text-white text-sm font-semibold px-4 py-3 rounded-lg shadow-lg border-b-4 ${toastStyles[toast.type]}`}>
             {toastIcons[toast.type]}
            {toast.message}
          </div>
        ))}
      </div>
    </NotificationContext.Provider>
  );
};


// --- Auth Context ---
const AuthContext = createContext();
const useAuth = () => useContext(AuthContext);

const AuthProvider = ({ children }) => {
    const { addToast } = useNotification();
    const [user, setUser] = useLocalStorage('user', null);
    const [allUsers, setAllUsers] = useLocalStorage('users', initialData.users);

    const login = (email, password) => {
        const foundUser = allUsers.find(u => u.email === email && u.password === password);
        if (!foundUser) {
            addToast('Credenciales inválidas', 'error');
            return null;
        }
        
        setUser(foundUser);
        addToast(`Bienvenido, ${foundUser.name}`, 'success');
        return foundUser;
    };
    
    const logout = () => {
        setUser(null);
        addToast('Sesión cerrada correctamente', 'info');
        window.location.hash = '#public';
    };
    
    const updateUser = (userId, updates) => {
        const updatedUsers = allUsers.map(u => u.uid === userId ? {...u, ...updates} : u);
        setAllUsers(updatedUsers);
        if(user && user.uid === userId) {
            setUser(prev => ({...prev, ...updates}));
        }
    }

    const value = { user, login, logout, allUsers, setAllUsers, updateUser };
    
    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};


// --- Data Context ---
const DataContext = createContext();
const useData = () => useContext(DataContext);

const DataProvider = ({ children }) => {
    const { addToast } = useNotification();
    const [holidays, setHolidays] = useLocalStorage('holidays', initialData.holidays);
    const [companies, setCompanies] = useLocalStorage('companies', initialData.companies);
    const [complaints, setComplaints] = useLocalStorage('complaints', initialData.complaints);
    const [plans, setPlans] = useLocalStorage('plans', initialData.plans);
    
    const addComplaint = (complaintData, companyId) => {
        const password = Math.floor(100000 + Math.random() * 900000).toString();
        const newComplaint = {
            ...complaintData,
            id: `CASO-${String(complaints.length + 1).padStart(3, '0')}`,
            companyId,
            password,
            createdAt: new Date().toISOString(),
            closedAt: null,
            status: "Ingresada",
            severity: "Sin Asignar",
            investigatorIds: [],
            receptionType: null,
            internalAction: null,
            dtComplaintDate: null,
            dtReceptionDate: null,
            managements: [
                { id: uuidv4(), text: "Definir si la investigación será interna o derivada a la Inspección del Trabajo", completed: false, dueDate: null, assignedTo: null }
            ],
            safeguardMeasures: [],
            internalComments: [],
            auditLog: [{ id: uuidv4(), action: "Creación de Denuncia", userId: "public", timestamp: new Date().toISOString() }],
            timelineProgress: {},
            chatMessages: [],
            caseFiles: [],
            sanctions: [],
            otherMeasures: [],
        };
        setComplaints(prev => [...prev, newComplaint]);
        return newComplaint;
    };
    
    const updateComplaint = (complaintId, updates, user) => {
        setComplaints(prev => prev.map(c => {
            if (c.id === complaintId) {
                const finalUpdates = {...updates};
                
                if(updates.status === 'Cerrada' && c.status !== 'Cerrada') {
                    finalUpdates.closedAt = new Date().toISOString();
                } else if (updates.status !== 'Cerrada' && c.status === 'Cerrada') {
                    finalUpdates.closedAt = null;
                }

                const auditLogEntries = [];
                for (const key in finalUpdates) {
                    if (Object.prototype.hasOwnProperty.call(finalUpdates, key) && !Array.isArray(finalUpdates[key]) && key !== 'timelineProgress' && key !== 'auditLog' && JSON.stringify(finalUpdates[key]) !== JSON.stringify(c[key])) {
                        auditLogEntries.push({
                            id: uuidv4(),
                            action: `Campo '${key}' actualizado.`,
                            userId: user?.uid || 'system',
                            timestamp: new Date().toISOString()
                        });
                    }
                }

                const newAuditLog = finalUpdates.auditLog ? finalUpdates.auditLog : [...c.auditLog, ...auditLogEntries];

                return { ...c, ...finalUpdates, auditLog: newAuditLog };
            }
            return c;
        }));
        addToast("Caso actualizado correctamente", "success");
    };
    
    const updateCompany = (companyId, updates) => {
        setCompanies(prev => prev.map(c => c.id === companyId ? { ...c, ...updates } : c));
        addToast("Empresa actualizada", "success");
    };

    const value = { companies, setCompanies, complaints, addComplaint, updateComplaint, holidays, setHolidays, updateCompany, plans, setPlans };
    return <DataContext.Provider value={value}>{children}</DataContext.Provider>;
}


// --- Config Context ---
const ConfigContext = createContext();
const useConfig = () => useContext(ConfigContext);

const ConfigProvider = ({ children }) => {
    const [configurations, setConfigurations] = useLocalStorage('configurations', initialData.configurations);

    const getCompanyConfig = (companyId) => {
        return configurations[companyId] || defaultConfig;
    };
    
    const updateCompanyConfig = (companyId, newConfig) => {
        setConfigurations(prev => ({ ...prev, [companyId]: newConfig }));
    };

    const value = { getCompanyConfig, updateCompanyConfig };

    return <ConfigContext.Provider value={value}>{children}</ConfigContext.Provider>;
}

// ===============================================================================================
// REUSABLE UI COMPONENTS
// ===============================================================================================

const Card = ({ children, className = '' }) => (
  <div className={`bg-white rounded-lg shadow-md p-6 ${className}`}>
    {children}
  </div>
);

const Button = ({ children, onClick, variant = 'primary', type = 'button', disabled = false, className = '' }) => {
  const baseStyles = 'px-4 py-2 rounded-md font-semibold focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors duration-200 inline-flex items-center justify-center gap-2';
  const variants = {
    primary: 'bg-indigo-600 text-white hover:bg-indigo-700 focus:ring-indigo-500',
    secondary: 'bg-slate-200 text-slate-800 hover:bg-slate-300 focus:ring-slate-400',
    danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',
    ghost: 'bg-transparent text-slate-600 hover:bg-slate-100'
  };
  const disabledStyles = 'disabled:bg-slate-300 disabled:text-slate-500 disabled:cursor-not-allowed';

  return (
    <button type={type} onClick={onClick} disabled={disabled} className={`${baseStyles} ${variants[variant]} ${disabledStyles} ${className}`}>
      {children}
    </button>
  );
};

const Input = React.forwardRef(({ label, id, value, onChange, description, ...props }, ref) => (
    <div>
        {label && <label htmlFor={id} className="block text-sm font-medium text-slate-700 mb-1">{label}</label>}
        <input ref={ref} id={id} value={value} onChange={onChange} {...props} className="w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
        {description && <p className="mt-1 text-xs text-slate-500">{description}</p>}
    </div>
));


const RutInput = ({ label, id, value, onChange, description, ...props }) => {
    const formatRut = (rut = '') => {
        rut = rut.replace(/[^0-9kK]/g, '');
        if (rut.length === 0) return '';

        let body = rut.slice(0, -1);
        let dv = rut.slice(-1).toUpperCase();
        body = body.replace(/\B(?=(\d{3})+(?!\d))/g, ".");
        
        return `${body}-${dv}`;
    };

    const cleanRut = (formattedRut = '') => {
        return formattedRut.replace(/[^0-9kK]/g, '');
    }

    const handleChange = (e) => {
        const cleaned = cleanRut(e.target.value);
        const formatted = formatRut(cleaned);
        onChange({ target: { id: id, value: formatted } }); // Mimic event object
    };

    return (
        <Input 
            label={label}
            id={id}
            value={value || ''}
            onChange={handleChange}
            description={description}
            {...props}
        />
    );
};

const Select = ({ label, id, value, onChange, children, description, ...props }) => (
    <div>
        {label && <label htmlFor={id} className="block text-sm font-medium text-slate-700 mb-1">{label}</label>}
        <select id={id} value={value} onChange={onChange} {...props} className="w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm bg-white">
            {children}
        </select>
         {description && <p className="mt-1 text-xs text-slate-500">{description}</p>}
    </div>
);

const TextArea = ({ label, id, value, onChange, description, ...props }) => (
    <div>
        {label && <label htmlFor={id} className="block text-sm font-medium text-slate-700 mb-1">{label}</label>}
        <textarea id={id} value={value} onChange={onChange} {...props} className="w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" rows="4"></textarea>
         {description && <p className="mt-1 text-xs text-slate-500">{description}</p>}
    </div>
);

const RadioGroup = ({ label, id, value, onChange, options, description, required }) => (
    <div>
        <label className="block text-sm font-medium text-slate-700 mb-2">{label}</label>
        {description && <p className="text-xs text-slate-500 -mt-1 mb-2">{description}</p>}
        <div className="space-y-2">
            {options.map(option => (
                <label key={option} className="flex items-center gap-2 p-3 border rounded-md has-[:checked]:bg-indigo-50 has-[:checked]:border-indigo-500 cursor-pointer">
                    <input
                        type="radio"
                        name={id}
                        value={option}
                        checked={value === option}
                        onChange={onChange}
                        required={required}
                        className="h-4 w-4 text-indigo-600 border-slate-300 focus:ring-indigo-500"
                    />
                    <span className="text-sm text-slate-800">{option}</span>
                </label>
            ))}
        </div>
    </div>
);


const WitnessesField = ({ label, description, value, onChange }) => {
    const witnesses = Array.isArray(value) ? value : [];

    const handleWitnessChange = (index, field, fieldValue) => {
        const newWitnesses = [...witnesses];
        newWitnesses[index] = { ...newWitnesses[index], [field]: fieldValue };
        onChange(newWitnesses);
    };

    const addWitness = () => {
        onChange([...witnesses, { id: uuidv4(), name: '', position: '', facts: '' }]);
    };

    const removeWitness = (index) => {
        onChange(witnesses.filter((_, i) => i !== index));
    };

    return (
        <div>
            <label className="block text-sm font-medium text-slate-700">{label}</label>
            {description && <p className="text-xs text-slate-500 mt-1 mb-2">{description}</p>}
            <div className="space-y-4">
                {witnesses.map((witness, index) => (
                    <div key={witness.id} className="p-4 border rounded-md bg-slate-50 relative">
                        <div className="space-y-2">
                            <Input label="Nombre del Testigo" value={witness.name || ''} onChange={(e) => handleWitnessChange(index, 'name', e.target.value)} />
                            <Input label="Cargo del Testigo" value={witness.position || ''} onChange={(e) => handleWitnessChange(index, 'position', e.target.value)} />
                            <TextArea label="¿Sobre qué hechos puede declarar?" value={witness.facts || ''} onChange={(e) => handleWitnessChange(index, 'facts', e.target.value)} rows={2} />
                        </div>
                        <Button variant="ghost" className="absolute top-1 right-1 p-1 h-auto" onClick={() => removeWitness(index)}>
                            <Trash className="w-4 h-4 text-red-500" />
                        </Button>
                    </div>
                ))}
                <Button variant="secondary" onClick={addWitness}>
                    <Plus className="w-4 h-4" /> Agregar otro testigo
                </Button>
            </div>
        </div>
    );
};

const DocumentsField = ({ label, description, value, onChange }) => {
    const documents = Array.isArray(value) ? value : [];

    const handleDocChange = (index, field, fieldValue) => {
        const newDocs = [...documents];
        newDocs[index] = { ...newDocs[index], [field]: fieldValue };
        onChange(newDocs);
    };

    const addDocument = () => {
        onChange([...documents, { id: uuidv4(), fileName: '', description: '' }]);
    };
    
    const removeDocument = (index) => {
        onChange(documents.filter((_, i) => i !== index));
    };

    return (
        <div>
            <label className="block text-sm font-medium text-slate-700">{label}</label>
            {description && <p className="text-xs text-slate-500 mt-1 mb-2">{description}</p>}
            <div className="space-y-4">
                {documents.map((doc, index) => (
                    <div key={doc.id} className="p-4 border rounded-md bg-slate-50 relative">
                        <div className="space-y-2">
                           <Input type="file" onChange={(e) => handleDocChange(index, 'fileName', e.target.files[0]?.name || '')} />
                           <Input label="Descripción del Documento" value={doc.description} onChange={e => handleDocChange(index, 'description', e.target.value)} />
                        </div>
                        <Button variant="ghost" className="absolute top-1 right-1 p-1 h-auto" onClick={() => removeDocument(index)}>
                            <Trash className="w-4 h-4 text-red-500" />
                        </Button>
                    </div>
                ))}
                <Button variant="secondary" onClick={addDocument}><Plus className="w-4 h-4" /> Agregar Documento</Button>
            </div>
        </div>
    )
}

const AccusedPersonsField = ({ label, description, value, onChange, required }) => {
    const accusedPersons = Array.isArray(value) ? value : [];

    const handleAccusedChange = (index, field, fieldValue) => {
        const newAccused = [...accusedPersons];
        newAccused[index] = { ...newAccused[index], [field]: fieldValue };
        if(field === 'employeeType' && fieldValue === 'Trabajador de mi misma empresa') {
            newAccused[index].employerName = '';
        }
        onChange(newAccused);
    };

    const addAccused = () => {
        onChange([...accusedPersons, { id: uuidv4(), name: '', position: '', dependency: '', employeeType: 'Trabajador de mi misma empresa', employerName: '' }]);
    };

    const removeAccused = (index) => {
        onChange(accusedPersons.filter((_, i) => i !== index));
    };

    return (
        <div>
            <label className="block text-sm font-medium text-slate-700">{label}</label>
            {description && <p className="text-xs text-slate-500 mt-1 mb-2">{description}</p>}
            <div className="space-y-4">
                {accusedPersons.map((person, index) => (
                    <div key={person.id} className="p-4 border rounded-md bg-slate-50 relative">
                        <div className="space-y-4">
                            <Input label="Nombre Completo del Denunciado/a" value={person.name || ''} onChange={(e) => handleAccusedChange(index, 'name', e.target.value)} required={required && index === 0}/>
                            <Input label="Cargo / Puesto de Trabajo" value={person.position || ''} onChange={(e) => handleAccusedChange(index, 'position', e.target.value)} />
                             <RadioGroup
                                label="Tipo de trabajador"
                                id={`employeeType-${person.id}`}
                                value={person.employeeType}
                                onChange={(e) => handleAccusedChange(index, 'employeeType', e.target.value)}
                                options={["Trabajador de mi misma empresa", "Trabajador de otra empresa"]}
                            />
                            {person.employeeType === 'Trabajador de otra empresa' && (
                                 <Input label="Nombre del Empleador" value={person.employerName || ''} onChange={(e) => handleAccusedChange(index, 'employerName', e.target.value)} />
                            )}
                        </div>
                        {index > 0 && <Button variant="ghost" className="absolute top-1 right-1 p-1 h-auto" onClick={() => removeAccused(index)}>
                            <Trash className="w-4 h-4 text-red-500" />
                        </Button>}
                    </div>
                ))}
                <Button variant="secondary" onClick={addAccused}>
                    <Plus className="w-4 h-4" /> Agregar otro denunciado
                </Button>
            </div>
        </div>
    )
};


const Modal = ({ isOpen, onClose, title, children }) => {
    if (!isOpen) return null;
    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-40 flex justify-center items-center" onClick={onClose}>
            <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl m-4" onClick={e => e.stopPropagation()}>
                <div className="p-4 border-b flex justify-between items-center">
                    <h3 className="text-lg font-semibold text-slate-800">{title}</h3>
                    <Button variant="ghost" className="p-1 h-auto" onClick={onClose}><X className="w-5 h-5"/></Button>
                </div>
                <div className="p-6 max-h-[80vh] overflow-y-auto">{children}</div>
            </div>
        </div>
    );
};

const ConfirmationModal = ({ isOpen, onClose, onConfirm, title, children }) => {
    if (!isOpen) return null;
    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center" onClick={onClose}>
            <div className="bg-white rounded-lg shadow-xl w-full max-w-md m-4" onClick={e => e.stopPropagation()}>
                <div className="p-6 text-center">
                    <AlertCircle className="w-16 h-16 mx-auto text-amber-500" />
                    <h3 className="mt-2 text-lg font-semibold text-slate-800">{title}</h3>
                    <div className="mt-2 text-sm text-slate-600">
                        {children}
                    </div>
                </div>
                <div className="bg-slate-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg">
                    <Button onClick={onConfirm} variant="danger" className="w-full sm:ml-3 sm:w-auto">
                        Confirmar
                    </Button>
                    <Button onClick={onClose} variant="secondary" className="mt-3 w-full sm:mt-0 sm:w-auto">
                        Cancelar
                    </Button>
                </div>
            </div>
        </div>
    );
};


const Tooltip = ({ text, children }) => (
    <div className="relative flex items-center group">
        {children}
        <div className="absolute bottom-full mb-2 w-max max-w-xs bg-slate-800 text-white text-xs rounded py-1 px-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none z-10">
            {text}
        </div>
    </div>
);

const BarChart = ({ title, data, colors }) => {
    const maxValue = data.length > 0 ? Math.max(...data.map(d => d.value), 1) : 1;

    return (
        <Card>
            <h3 className="text-md font-semibold text-slate-800 mb-4">{title}</h3>
            <div className="space-y-2">
                {data.map((item, index) => (
                    <div key={item.label} className="flex items-center gap-2">
                        <span className="text-sm text-slate-600 w-28 truncate">{item.label}</span>
                        <div className="flex-1 bg-slate-200 rounded-full h-6">
                            <div
                                className="h-6 rounded-full text-xs font-bold text-white flex items-center px-2"
                                style={{ width: `${(item.value / maxValue) * 100}%`, backgroundColor: colors[index % colors.length] }}
                            >
                                {item.value}
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        </Card>
    );
};

const AddItemModal = ({ isOpen, onClose, onSubmit, title, initialState, children, isEditing = false }) => {
    const [formData, setFormData] = useState(initialState);
    const formRef = useRef(null);
    
    useEffect(() => {
        if (isOpen) {
            setFormData(initialState);
        }
    }, [isOpen, initialState]);

    const handleChange = (field, value) => {
        setFormData(prev => ({ ...prev, [field]: value }));
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        if (formRef.current && !formRef.current.checkValidity()) {
            formRef.current.reportValidity();
            return;
        }
        onSubmit(formData);
    };

    return (
        <Modal isOpen={isOpen} onClose={onClose} title={title}>
            <form ref={formRef} onSubmit={handleSubmit} className="space-y-4">
                {children(formData, handleChange)}
                <div className="flex justify-end gap-3 pt-4">
                    <Button type="button" onClick={onClose} variant="secondary">Cancelar</Button>
                    <Button type="submit" variant="primary">{isEditing ? 'Guardar Cambios' : 'Añadir'}</Button>
                </div>
            </form>
        </Modal>
    );
};

const AlertsPanel = ({ alerts, onAlertClick }) => {
    if (!alerts || alerts.length === 0) return null;

    const alertConfig = {
        new_case: { icon: <FolderOpen className="w-5 h-5 text-blue-800"/>, color: "bg-blue-100 border-blue-500 text-blue-800" },
        deadline: { icon: <Clock className="w-5 h-5 text-red-800"/>, color: "bg-red-100 border-red-500 text-red-800" },
        assignment: { icon: <User className="w-5 h-5 text-purple-800"/>, color: "bg-purple-100 border-purple-500 text-purple-800" },
        activity: { icon: <MessageSquare className="w-5 h-5 text-green-800"/>, color: "bg-green-100 border-green-500 text-green-800" }
    };
    
    return (
        <div className="p-4 bg-white rounded-lg shadow-md mb-6 border-l-4 border-yellow-400">
            <div className="flex justify-between items-center mb-2">
                <div className="flex items-center gap-2">
                    <Bell className="w-6 h-6 text-yellow-500"/>
                    <h2 className="text-lg font-semibold text-slate-800">Alertas y Notificaciones</h2>
                </div>
            </div>
            <ul className="space-y-2 max-h-48 overflow-y-auto">
                {alerts.map(alert => (
                     <li key={alert.id} className={`flex items-center gap-3 p-2 rounded-md text-sm ${alertConfig[alert.type]?.color || 'bg-slate-100'}`}>
                        {alertConfig[alert.type]?.icon || <Bell />}
                        <a href={`#admin/cases/${alert.caseId}`} onClick={() => onAlertClick && onAlertClick(alert.caseId)} className="flex-1 hover:underline">{alert.text}</a>
                        <span className="text-xs">{new Date(alert.date).toLocaleDateString()}</span>
                    </li>
                ))}
            </ul>
        </div>
    )
}


// ===============================================================================================
// PORTAL: PUBLIC
// ===============================================================================================

const PublicPortal = () => {
    const [view, setView] = useState('selectCompany'); // selectCompany, form, success, statusCheckLogin, statusDetail
    const [selectedCompany, setSelectedCompany] = useState(null);
    const [caseInfo, setCaseInfo] = useState(null);
    const [loggedInCase, setLoggedInCase] = useState(null);
    const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);

    const { companies, holidays } = useData();
    
    const activeCompanies = companies.filter(c => c.status === 'activo');

    const handleCompanySelect = (company) => {
        setSelectedCompany(company);
        setIsConfirmModalOpen(true);
    };
    
    const handleConfirmCompany = () => {
        setIsConfirmModalOpen(false);
        setView('form');
    };
    
    const handleCancelCompany = () => {
        setIsConfirmModalOpen(false);
        setSelectedCompany(null);
    };

    const handleFormSuccess = (newComplaint) => {
        setCaseInfo({ id: newComplaint.id, password: newComplaint.password });
        setView('success');
    }
    
     const handleStatusLoginSuccess = (complaint) => {
        setLoggedInCase(complaint);
        setView('statusDetail');
    };

    return (
        <div className="min-h-screen bg-slate-100 flex flex-col items-center justify-center p-4">
            <div className="w-full max-w-2xl mx-auto">
                <div className="text-center mb-8">
                    <Shield className="inline-block w-16 h-16 text-indigo-600"/>
                    <h1 className="text-3xl font-bold text-slate-800">Canal de Denuncias</h1>
                    <p className="text-slate-600 mt-2">Un espacio seguro y confidencial para informar situaciones.</p>
                </div>

                {view === 'selectCompany' && (
                    <Card>
                        <h2 className="text-xl font-semibold text-slate-700">Seleccione su Empresa</h2>
                        <p className="text-slate-500 mb-6">Para iniciar el proceso, por favor seleccione la empresa a la que pertenece.</p>
                        <div className="space-y-3">
                            {activeCompanies.map(company => (
                                <button key={company.id} onClick={() => handleCompanySelect(company)} className="w-full text-left p-4 border border-slate-200 rounded-lg hover:bg-slate-50 hover:border-indigo-500 transition-all flex justify-between items-center">
                                    <span className="font-semibold text-slate-700">{company.name}</span>
                                    <ChevronRight className="w-5 h-5 text-indigo-500"/>
                                </button>
                            ))}
                        </div>
                         <div className="mt-6 text-center flex justify-center gap-6">
                            <a href="#admin" className="text-sm text-indigo-600 hover:underline">Acceso Administradores</a>
                            <a href="#public/status" onClick={(e) => { e.preventDefault(); setView('statusCheckLogin')}} className="text-sm text-indigo-600 hover:underline">Seguimiento de caso</a>
                        </div>
                    </Card>
                )}
                
                {isConfirmModalOpen && (
                     <ConfirmationModal
                        isOpen={isConfirmModalOpen}
                        onClose={handleCancelCompany}
                        onConfirm={handleConfirmCompany}
                        title={`Confirmar Empresa: ${selectedCompany?.name}`}
                    >
                        <p>Está a punto de ingresar una denuncia para la empresa **{selectedCompany?.name}**. Por favor, asegúrese de que esta es la empresa correcta. Una denuncia ingresada a una empresa incorrecta no podrá ser tramitada.</p>
                        <p>Recuerde que este ese es un canal interno de denuncias y, si lo desea, puede ingresar su denuncia directamente en la Dirección del Trabajo.</p>
                    </ConfirmationModal>
                )}

                {view === 'form' && <ComplaintForm companyId={selectedCompany.id} onBack={() => setView('selectCompany')} onSuccess={handleFormSuccess} />}
                
                {view === 'success' && (
                    <Card className="text-center">
                        <CheckCircle className="inline-block w-16 h-16 text-emerald-500"/>
                        <h2 className="text-2xl font-bold text-slate-800 mt-4">Denuncia Enviada Exitosamente</h2>
                        <p className="text-slate-600 mt-2">Guarde los siguientes datos para hacer seguimiento de su caso.</p>
                         <div className="mt-4 space-y-2 text-left bg-slate-50 p-4 rounded-lg inline-block">
                            <div>
                                <p className="text-xs text-slate-500">Código del caso:</p>
                                <p className="text-xl font-mono text-indigo-700">{caseInfo?.id}</p>
                            </div>
                             <div>
                                <p className="text-xs text-slate-500">Contraseña:</p>
                                <p className="text-xl font-mono text-indigo-700">{caseInfo?.password}</p>
                            </div>
                        </div>
                        <Button onClick={() => setView('selectCompany')} className="mt-6">Volver al Inicio</Button>
                    </Card>
                )}
                
                {view === 'statusCheckLogin' && <StatusCheckLoginPage onLoginSuccess={handleStatusLoginSuccess} onBack={() => setView('selectCompany')} />}
                {view === 'statusDetail' && <StatusDetailPage complaint={loggedInCase} onBack={() => { setView('selectCompany'); setLoggedInCase(null); }} holidays={holidays} />}


            </div>
        </div>
    );
};

const StatusCheckLoginPage = ({ onLoginSuccess, onBack }) => {
    const [caseId, setCaseId] = useState('');
    const [password, setPassword] = useState('');
    const { complaints } = useData();
    const { addToast } = useNotification();

    const handleSubmit = (e) => {
        e.preventDefault();
        const foundComplaint = complaints.find(
            c => c.id.toLowerCase() === caseId.toLowerCase().trim() && c.password === password.trim()
        );

        if (foundComplaint) {
            onLoginSuccess(foundComplaint);
        } else {
            addToast('Código de caso o contraseña incorrectos.', 'error');
        }
    };

    return (
        <Card>
            <h2 className="text-xl font-semibold text-slate-700 mb-1">Seguimiento de Caso</h2>
            <p className="text-slate-500 mb-6">Ingrese su código y contraseña para ver el estado de su denuncia.</p>
            <form onSubmit={handleSubmit} className="space-y-4">
                <Input label="Código del Caso" id="caseId" value={caseId} onChange={e => setCaseId(e.target.value)} required />
                <Input label="Contraseña" id="password" type="password" value={password} onChange={e => setPassword(e.target.value)} required />
                <div className="flex justify-between items-center pt-2">
                    <Button type="button" variant="secondary" onClick={onBack}>Volver</Button>
                    <Button type="submit" variant="primary">Consultar</Button>
                </div>
            </form>
        </Card>
    );
};

const StatusDetailPage = ({ complaint, onBack, holidays }) => {
    const { complaints: allComplaints, updateComplaint, plans, companies } = useData();
    // Re-fetch complaint from context to get latest updates
    const currentComplaint = allComplaints.find(c => c.id === complaint.id);

    const { getCompanyConfig } = useConfig();
    const config = getCompanyConfig(currentComplaint.companyId);
    
    const company = useMemo(() => companies.find(c => c.id === currentComplaint.companyId), [currentComplaint, companies]);
    const plan = useMemo(() => plans.find(p => p.id === company?.planId), [company, plans]);
    const features = plan?.features || {};

    const getTimelineSettings = useCallback(() => {
        const { receptionType, internalAction } = currentComplaint;
        if (receptionType === 'interna') {
            if (internalAction === 'investigar') return config.timelineSettings.interna;
            if (internalAction === 'derivar') return config.timelineSettings.derivada;
        } else if (receptionType === 'notificada') {
            return config.timelineSettings.notificada;
        }
        return [];
    }, [currentComplaint, config.timelineSettings]);
    
    const timelineEvents = useMemo(() => {
        const settings = getTimelineSettings();
        let lastEndDate = new Date(currentComplaint.createdAt);

        return (settings || []).map((setting, index) => {
            let stageStartDate;
            const prevEvent = index > 0 ? timelineEvents[index-1] : null;

            if (index > 0 && setting.countFrom === 'previous-stage-end') {
                stageStartDate = new Date(lastEndDate);
            } else {
                 switch(setting.countFrom) {
                    case 'case-start': stageStartDate = new Date(currentComplaint.createdAt); break;
                    case 'complaint-date': stageStartDate = new Date(currentComplaint.dtComplaintDate || currentComplaint.createdAt); break;
                    case 'reception-date': stageStartDate = new Date(currentComplaint.dtReceptionDate || currentComplaint.createdAt); break;
                    case 'day-zero':
                        const reception = new Date(currentComplaint.dtReceptionDate || currentComplaint.createdAt);
                        stageStartDate = calculateEndDate(reception, 3, 'habiles-administrativos', holidays);
                        break;
                    default: stageStartDate = new Date(currentComplaint.createdAt);
                }
            }
            
            const stageEndDate = calculateEndDate(stageStartDate, setting.duration, setting.dayType, holidays);
            lastEndDate = stageEndDate;

            return { ...setting, startDate: stageStartDate, endDate: stageEndDate };
        });
    }, [currentComplaint, getTimelineSettings, holidays]);

    const currentStageName = useMemo(() => {
        if (currentComplaint.status === 'Cerrada') return 'Proceso Finalizado';
        if (!timelineEvents || timelineEvents.length === 0) {
            return currentComplaint.status; // Fallback to general status
        }
        const firstIncompleteStage = timelineEvents.find(event => !currentComplaint.timelineProgress?.[event.id]);

        if(firstIncompleteStage) {
            return firstIncompleteStage.name;
        }
        
        return "Proceso Finalizado";
    }, [timelineEvents, currentComplaint]);

    const handleSendMessage = (text) => {
        const newMessage = {
            id: uuidv4(), text, senderId: 'complainant', senderName: 'Denunciante',
            timestamp: new Date().toISOString()
        };
        const newAuditLog = [ ...currentComplaint.auditLog,
            { id: uuidv4(), action: `Denunciante envió un mensaje.`, userId: "public", timestamp: new Date().toISOString() }
        ];
        updateComplaint(currentComplaint.id, {
            chatMessages: [...(currentComplaint.chatMessages || []), newMessage],
            auditLog: newAuditLog
        }, null); 
    };

    const activeMeasures = (currentComplaint.safeguardMeasures || []).filter(m => m.status === "Implementada");

    return (
        <Card>
            <div className="flex justify-between items-start">
                <div>
                    <h2 className="text-xl font-semibold text-slate-800">Estado del Caso: {currentComplaint.id}</h2>
                    <p className="mt-1 text-sm text-slate-500">Fecha de ingreso: {new Date(currentComplaint.createdAt).toLocaleDateString()}</p>
                </div>
                 <Button onClick={onBack} variant="secondary">Cerrar</Button>
            </div>
            
            <div className="mt-6 space-y-6">
                <div>
                    <h3 className="text-lg font-semibold text-indigo-700 mb-2">Estado Actual</h3>
                     <p className="font-medium bg-slate-100 p-3 rounded-md">{currentStageName}</p>
                </div>

                {features.visualizacionMedidas && activeMeasures.length > 0 && (
                     <div>
                        <h3 className="text-lg font-semibold text-indigo-700 mb-2">Medidas de Resguardo Vigentes</h3>
                        <ul className="list-disc list-inside space-y-1 bg-slate-100 p-3 rounded-md">
                           {activeMeasures.map(measure => ( <li key={measure.id} className="text-sm">{measure.text}</li> ))}
                        </ul>
                    </div>
                )}
                
                {features.canalComunicacionDenunciante && <ChatTab 
                    title="Comunicaciones con Gestor"
                    messages={currentComplaint.chatMessages || []}
                    onSendMessage={handleSendMessage}
                    currentUserId="complainant"
                    placeholder="Escribe un mensaje..."
                    currentUserColor="bg-sky-100"
                    otherUserColor="bg-slate-200"
                />}
               
                <div>
                     <h3 className="text-lg font-semibold text-indigo-700 mb-2">Detalles de su Denuncia</h3>
                      <div className="space-y-4">
                        {config.formSteps.map((step) => (
                            <div key={step.id} className="p-4 border border-slate-200 rounded-lg">
                                <h4 className="font-semibold text-slate-800 mb-3">{step.title}</h4>
                                <dl className="space-y-2 text-sm">
                                    {step.fields.map(field => {
                                        const value = getNestedValue(currentComplaint.originalData, field.dataKey);
                                        if (!value || (Array.isArray(value) && value.length === 0)) return null;
                                        let displayValue = Array.isArray(value) ? value.join(', ') : value;
                                        if (field.type === 'witnesses' && Array.isArray(value)) {
                                            displayValue = value.map(w => w.name).join(', ') || 'N/A';
                                        } else if (field.type === 'documents' && Array.isArray(value)) {
                                            displayValue = value.map(d => d.fileName || 'Archivo').join(', ') || 'N/A';
                                        } else if (field.type === 'accusedPersons' && Array.isArray(value)) {
                                            displayValue = value.map(p => p.name).join(', ');
                                        }
                                        return (
                                            <div key={field.id} className="grid grid-cols-3 gap-2">
                                                <dt className="text-slate-500">{field.label}:</dt>
                                                <dd className="col-span-2 text-slate-700 font-medium">{displayValue}</dd>
                                            </div>
                                        );
                                    })}
                                </dl>
                            </div>
                        ))}
                    </div>
                </div>
            </div>
        </Card>
    )
};


const ComplaintForm = ({ companyId, onBack, onSuccess }) => {
    const { getCompanyConfig } = useConfig();
    const { addComplaint } = useData();
    const { addToast } = useNotification();
    const formRef = useRef(null);

    const config = useMemo(() => getCompanyConfig(companyId), [companyId, getCompanyConfig]);
    const reviewStep = {id: 'review', title: 'Revisar y Enviar', description: 'Revise la información antes de enviar.'};
    const formSteps = useMemo(() => [...config.formSteps, reviewStep], [config.formSteps]);
    
    const [currentStep, setCurrentStep] = useState(0);
    const [formData, setFormData] = useState({ accusedPersons: [{id: uuidv4(), name: '', position: '', dependency: '', employeeType: 'Trabajador de mi misma empresa', employerName: '' }] });
    const [editingFromReview, setEditingFromReview] = useState(false);
    
    const handleInputChange = (dataKey, value) => {
        setFormData(prev => {
            const newState = JSON.parse(JSON.stringify(prev)); // Deep copy
            setNestedValue(newState, dataKey, value);
            return newState;
        });
    };

    const isReviewStep = currentStep === formSteps.length - 1;

    const nextStep = () => {
        if (formRef.current && !formRef.current.checkValidity()) {
            formRef.current.reportValidity();
            return;
        }

        if (editingFromReview) {
            setCurrentStep(formSteps.length - 1); // Go back to review step
            setEditingFromReview(false); // Reset flag
        } else if (isReviewStep) { // Submit form
            const newComplaint = addComplaint({ originalData: formData }, companyId);
            onSuccess(newComplaint);
        } else {
            setCurrentStep(prev => Math.min(prev + 1, formSteps.length - 1));
        }
    };

    const prevStep = () => {
        setEditingFromReview(false); // Always reset when going back
        setCurrentStep(prev => Math.max(prev - 1, 0));
    };

    const goToStep = (stepIndex) => {
        if (isReviewStep) {
            setEditingFromReview(true);
        }
        setCurrentStep(stepIndex);
    };
    
    const step = formSteps[currentStep];

    return (
        <Card>
            <div className="mb-6">
                <h2 className="text-xl font-semibold text-slate-700">{step.title}</h2>
                <p className="text-slate-500">{step.description}</p>
            </div>
            
            <form ref={formRef}>
                {isReviewStep ? (
                    <ReviewStep formData={formData} formSteps={config.formSteps} onEdit={goToStep} />
                ) : (
                    <div className="space-y-4">
                        {step.fields.map(field => {
                            const value = getNestedValue(formData, field.dataKey);
                            const commonProps = {
                                key: field.id, label: field.label, id: field.id,
                                description: field.description, required: field.required
                            };
                            
                            switch (field.type) {
                                case 'textarea':
                                    return <TextArea {...commonProps} value={value || ''} onChange={e => handleInputChange(field.dataKey, e.target.value)} />;
                                case 'radio':
                                    return <RadioGroup {...commonProps} value={value} onChange={e => handleInputChange(field.dataKey, e.target.value)} options={field.options || []} name={field.dataKey} />;
                                case 'select':
                                    return <Select {...commonProps} value={value || ''} onChange={e => handleInputChange(field.dataKey, e.target.value)}><option value="">-- Seleccione --</option>{(field.options || []).map(opt => <option key={opt} value={opt}>{opt}</option>)}</Select>;
                                case 'witnesses':
                                    return <WitnessesField {...commonProps} value={value} onChange={newValue => handleInputChange(field.dataKey, newValue)} />;
                                case 'documents':
                                    return <DocumentsField {...commonProps} value={value} onChange={newValue => handleInputChange(field.dataKey, newValue)} />;
                                case 'accusedPersons':
                                    return <AccusedPersonsField {...commonProps} value={value} onChange={newValue => handleInputChange(field.dataKey, newValue)} />;
                                case 'rut':
                                    return <RutInput {...commonProps} value={value || ''} onChange={e => handleInputChange(field.dataKey, e.target.value)} />;
                                default:
                                    return <Input type={field.type} {...commonProps} value={value || ''} onChange={e => handleInputChange(field.dataKey, e.target.value)} />;
                            }
                        })}
                    </div>
                )}
            </form>
            
            <div className="mt-8 flex justify-between items-center">
                {currentStep > 0 ? (
                    <Button onClick={prevStep} variant="secondary">
                       <ChevronLeft className="w-4 h-4"/> Anterior
                    </Button>
                ) : (
                    <Button onClick={onBack} variant="secondary">
                       <ChevronLeft className="w-4 h-4"/> Cambiar Empresa
                    </Button>
                )}
                <Button onClick={nextStep} variant="primary">
                    {isReviewStep ? 'Enviar Denuncia' : 'Siguiente'}
                    {!isReviewStep && <ChevronRight className="w-4 h-4"/>}
                </Button>
            </div>
        </Card>
    );
};

const ReviewStep = ({ formData, formSteps, onEdit }) => (
    <div className="space-y-6">
        {formSteps.map((step, stepIndex) => (
            <div key={step.id} className="p-4 border border-slate-200 rounded-lg">
                <div className="flex justify-between items-center mb-3">
                    <h3 className="font-semibold text-slate-800">{step.title}</h3>
                    <Button onClick={() => onEdit(stepIndex)} variant="ghost" className="text-sm">
                        <Edit className="w-4 h-4"/> Editar
                    </Button>
                </div>
                <dl className="space-y-2 text-sm">
                    {step.fields.map(field => {
                        const value = getNestedValue(formData, field.dataKey);
                        let displayValue;
                        if (value === undefined || value === null || value === '' || (Array.isArray(value) && value.length === 0)) {
                             displayValue = 'No ingresado';
                        } else if (Array.isArray(value)) {
                            if (field.type === 'accusedPersons') {
                                return value.map((person, i) => (
                                    <div key={person.id} className="mt-2 pt-2 border-t first:border-t-0">
                                        <p className="font-semibold">Denunciado/a #{i + 1}: <span className="font-medium">{person.name || 'N/A'}</span></p>
                                        <div className="pl-4">
                                            <p>Cargo: {person.position || 'N/A'}</p>
                                            <p>Tipo: {person.employeeType || 'N/A'}</p>
                                            {person.employerName && <p>Empleador: {person.employerName}</p>}
                                        </div>
                                    </div>
                                ))
                            }
                            if (field.type === 'witnesses') displayValue = value.map(w => w.name).join(', ');
                            else if (field.type === 'documents') displayValue = value.map(d => d.fileName || 'Archivo').join(', ');
                            else displayValue = value.join(', ');
                        } else {
                            displayValue = value;
                        }
                        
                        return (
                            <div key={field.id} className="grid grid-cols-3 gap-2">
                                <dt className="text-slate-500">{field.label}:</dt>
                                <dd className="col-span-2 text-slate-700 font-medium">{displayValue}</dd>
                            </div>
                        );
                    })}
                </dl>
            </div>
        ))}
    </div>
);


// ===============================================================================================
// PORTAL: ADMIN
// ===============================================================================================

const AdminLayout = ({ children, features }) => {
    const { user, logout } = useAuth();
    const [activeView, setActiveView] = useState('dashboard');

    const handleNavigation = (view) => {
        setActiveView(view);
        window.location.hash = `#admin/${view}`;
    }

    useEffect(() => {
        const hash = window.location.hash.split('/')[1] || 'dashboard';
        setActiveView(hash);
    }, []);

    const navItems = [
        { id: 'dashboard', label: 'Dashboard', icon: <LayoutDashboard className="w-5 h-5"/>, feature: 'kpisYMetricas' },
        { id: 'users', label: 'Usuarios', icon: <Users className="w-5 h-5"/>, feature: 'gestionUsuarios' },
        { 
            id: 'settings', 
            label: 'Configuración', 
            icon: <Settings className="w-5 h-5"/>, 
            feature: ['constructorFormularios', 'constructorLineasTiempo', 'medidasPorDefecto']
        },
    ];

    return (
        <div className="flex h-screen bg-slate-100">
            {/* Sidebar */}
            <aside className="w-64 bg-white border-r border-slate-200 flex-shrink-0 flex flex-col">
                <div className="h-16 flex items-center px-4 border-b border-slate-200">
                     <Briefcase className="w-8 h-8 text-indigo-600"/>
                     <span className="ml-2 font-bold text-lg text-slate-800">Plataforma</span>
                </div>
                <nav className="flex-1 px-2 py-4 space-y-1">
                    {navItems.map(item => {
                        const hasFeature = Array.isArray(item.feature) 
                            ? item.feature.some(f => features && features[f])
                            : !item.feature || (features && features[item.feature]);

                        if (!hasFeature) return null;
                        
                        return (
                            <a
                                key={item.id}
                                href={`#admin/${item.id}`}
                                onClick={(e) => {e.preventDefault(); handleNavigation(item.id)}}
                                className={`flex items-center gap-3 px-3 py-2 rounded-md text-sm font-medium transition-colors ${activeView.startsWith(item.id) ? 'bg-indigo-100 text-indigo-700' : 'text-slate-600 hover:bg-slate-100'}`}
                            >
                                {item.icon}
                                {item.label}
                            </a>
                        )
                    })}
                </nav>
                <div className="p-4 border-t border-slate-200">
                     <div className="flex items-center gap-3">
                        <div className="w-8 h-8 rounded-full bg-slate-200 flex items-center justify-center text-slate-500 font-bold">{user?.name[0]}</div>
                        <div>
                            <p className="text-sm font-semibold text-slate-800">{user?.name}</p>
                            <p className="text-xs text-slate-500">{user?.email}</p>
                        </div>
                     </div>
                     <Button onClick={logout} variant="secondary" className="w-full mt-4">
                        <LogOut className="w-4 h-4"/>
                        Cerrar Sesión
                    </Button>
                </div>
            </aside>

            {/* Main Content */}
            <main className="flex-1 overflow-y-auto">
                <div className="p-8">
                    {React.cloneElement(children, { activeView, setActiveView, features })}
                </div>
            </main>
        </div>
    );
};

const AdminPortal = () => {
    
    const { user } = useAuth();
    const { companies, plans } = useData();

    const userCompany = companies.find(c => c.id === user.companyId);
    const userPlan = plans.find(p => p.id === userCompany?.planId);
    const features = userPlan?.features || {};

    let content;
    const hashParts = window.location.hash.split('/');
    const view = hashParts[1] || 'dashboard';
    const caseId = hashParts[2];
    
    if (view === 'cases' && caseId) {
        content = <CaseDetailPage caseId={caseId} />
    } else if (view === 'users') {
        content = <UserManagementPage />;
    } else if (view === 'settings') {
        content = <SettingsPage features={features} />;
    } else {
        content = <Dashboard />;
    }

    return (
        <AdminLayout features={features}>
            {content}
        </AdminLayout>
    );
};

const Dashboard = () => {
    const { complaints, companies, plans } = useData();
    const { user, allUsers, updateUser } = useAuth();
    
    const [searchQuery, setSearchQuery] = useState('');
    const [startDate, setStartDate] = useState('');
    const [endDate, setEndDate] = useState('');

    const userCompany = useMemo(() => companies.find(c => c.id === user.companyId), [companies, user]);
    const userPlan = useMemo(() => plans.find(p => p.id === userCompany?.planId), [plans, userCompany]);
    const features = userPlan?.features || {};

    const companyComplaints = useMemo(() => complaints.filter(c => c.companyId === user.companyId), [complaints, user.companyId]);
    
    const alerts = useAlerts(companyComplaints, user, allUsers);
    
    const { filteredComplaints, kpis, statusData, severityData } = useDashboardAnalytics({
        companyComplaints, searchQuery, startDate, endDate
    });
    
    const handleAlertClick = (caseId) => {
        updateUser(user.uid, { 
            lastVisited: {
                ...user.lastVisited,
                [caseId]: new Date().toISOString()
            }
        });
    };

    const getInvestigatorNames = (ids) => {
        if (!ids || ids.length === 0) return <span className="text-slate-400 italic">No asignado</span>;
        return ids.map((id, index) => (
            <span key={id}>
                {getUserNameById(id, allUsers) || <span className="text-red-500">?</span>}
                {index < ids.length - 1 && ', '}
            </span>
        ));
    };

    const statusColors = {
        'Ingresada': 'bg-sky-100 text-sky-800',
        'En Investigación': 'bg-amber-100 text-amber-800',
        'Cerrada': 'bg-emerald-100 text-emerald-800'
    };

    return (
        <div className="space-y-6">
            <AlertsPanel alerts={alerts} onAlertClick={handleAlertClick} />

            <h1 className="text-2xl font-bold text-slate-800">Dashboard de Casos</h1>
            
            {features.filtrosAvanzados && (
              <Card>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className="md:col-span-1">
                          <Input 
                              label="Buscar caso..." id="search" placeholder="ID, denunciante, palabra clave..."
                              value={searchQuery} onChange={e => setSearchQuery(e.target.value)}
                          />
                      </div>
                      <div>
                          <Input label="Fecha Inicio" id="start-date" type="date" value={startDate} onChange={e => setStartDate(e.target.value)} />
                      </div>
                      <div>
                          <Input label="Fecha Fin" id="end-date" type="date" value={endDate} onChange={e => setEndDate(e.target.value)} />
                      </div>
                  </div>
              </Card>
            )}

            {features.kpisYMetricas && (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
                    <KPIStat title="Casos Totales" value={kpis.totalCases} icon={<FolderOpen className="w-6 h-6"/>}/>
                    <KPIStat title="Casos Abiertos" value={kpis.openCases} icon={<AlertCircle className="w-6 h-6"/>}/>
                    <KPIStat title="En Investigación" value={kpis.inProgressCases} icon={<Search className="w-6 h-6"/>}/>
                    <KPIStat title="Casos Concluidos" value={kpis.closedCases} icon={<CheckCircle className="w-6 h-6"/>}/>
                    <KPIStat title="Resolución Promedio" value={`${kpis.avgResolutionDays} días`} icon={<Clock className="w-6 h-6"/>}/>
                </div>
            )}
            
            {features.graficos && (
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                    <BarChart title="Denuncias por Estado" data={statusData} colors={['#38bdf8', '#f59e0b', '#10b981']} />
                    <BarChart title="Denuncias por Gravedad" data={severityData} colors={['#10b981', '#f59e0b', '#ef4444', '#64748b']} />
                </div>
            )}
            
            <Card className="p-0 overflow-x-auto">
                <table className="w-full text-sm text-left text-slate-500">
                    <thead className="text-xs text-slate-700 uppercase bg-slate-50">
                        <tr>
                            <th scope="col" className="px-6 py-3">ID Caso</th>
                            <th scope="col" className="px-6 py-3">Fecha Ingreso</th>
                            <th scope="col" className="px-6 py-3">Estado</th>
                            <th scope="col" className="px-6 py-3">Investigador(es)</th>
                            <th scope="col" className="px-6 py-3">Acción</th>
                        </tr>
                    </thead>
                    <tbody>
                        {filteredComplaints.map(c => (
                            <tr key={c.id} className="bg-white border-b hover:bg-slate-50">
                                <th scope="row" className="px-6 py-4 font-medium text-slate-900 whitespace-nowrap">{c.id}</th>
                                <td className="px-6 py-4">{new Date(c.createdAt).toLocaleDateString()}</td>
                                <td className="px-6 py-4">
                                    <span className={`px-2 py-1 rounded-full text-xs font-semibold ${statusColors[c.status] || 'bg-slate-100 text-slate-800'}`}>
                                        {c.status}
                                    </span>
                                </td>
                                <td className="px-6 py-4">{getInvestigatorNames(c.investigatorIds)}</td>
                                <td className="px-6 py-4">
                                    <a href={`#admin/cases/${c.id}`} className="font-medium text-indigo-600 hover:underline">Ver Detalles</a>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </Card>
            
            {features.agendaSemanal && <WeeklyAgenda />}
        </div>
    )
};

const WeeklyAgenda = () => {
    const { user, allUsers } = useAuth();
    const { complaints } = useData();
    const [currentDate, setCurrentDate] = useState(new Date());
    const [selectedUser, setSelectedUser] = useState(user.role === 'admin' ? 'all' : user.uid);

    const companyInvestigators = useMemo(() => {
        return allUsers.filter(u => u.companyId === user.companyId && (u.role === 'investigador' || u.role === 'admin'));
    }, [allUsers, user.companyId]);
    
    const {agenda, days} = useMemo(() => {
        const startOfWeek = new Date(currentDate);
        startOfWeek.setDate(currentDate.getDate() - (currentDate.getDay() === 0 ? 6 : currentDate.getDay() - 1));
        startOfWeek.setHours(0, 0, 0, 0);

        const days = Array.from({ length: 7 }, (_, i) => {
            const day = new Date(startOfWeek);
            day.setDate(startOfWeek.getDate() + i);
            return day;
        });

        const endOfWeek = new Date(days[6]);
        endOfWeek.setHours(23, 59, 59, 999);
        
        const agenda = days.reduce((acc, day) => {
            acc[day.toISOString().split('T')[0]] = [];
            return acc;
        }, {});

        complaints.forEach(c => {
            if (c.companyId === user.companyId) {
                (c.managements || []).forEach(m => {
                    const shouldInclude = (selectedUser === 'all') || m.assignedTo === selectedUser;
                    
                    if (shouldInclude && m.dueDate && !m.completed) {
                        const dueDate = new Date(m.dueDate + 'T00:00:00'); // Normalize
                        if (dueDate >= startOfWeek && dueDate <= endOfWeek) {
                            const dayString = dueDate.toISOString().split('T')[0];
                            if (agenda[dayString]) {
                                agenda[dayString].push({ ...m, caseId: c.id });
                            }
                        }
                    }
                });
            }
        });
        return { agenda, days };
    }, [complaints, user.companyId, currentDate, selectedUser]);

    const handlePrevWeek = () => setCurrentDate(prev => new Date(prev.setDate(prev.getDate() - 7)));
    const handleNextWeek = () => setCurrentDate(prev => new Date(prev.setDate(prev.getDate() + 7)));

    const todayStr = new Date().toISOString().split('T')[0];

    return (
        <Card>
            <div className="flex justify-between items-center mb-4 flex-wrap gap-2">
                <h2 className="text-xl font-bold text-slate-800">Agenda Semanal</h2>
                <div className="flex items-center gap-2">
                    {user.role === 'admin' && (
                        <Select id="agenda-filter" value={selectedUser} onChange={e => setSelectedUser(e.target.value)}>
                            <option value="all">Todos</option>
                            {companyInvestigators.map(inv => (
                                <option key={inv.uid} value={inv.uid}>{inv.name}</option>
                            ))}
                        </Select>
                    )}
                    <Button onClick={handlePrevWeek} variant="secondary"><ChevronLeft className="w-4 h-4"/></Button>
                    <Button onClick={handleNextWeek} variant="secondary"><ChevronRight className="w-4 h-4"/></Button>
                </div>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-7 gap-2">
                {days.map(day => {
                    const dayStr = day.toISOString().split('T')[0];
                    const tasks = agenda[dayStr];
                    const isToday = dayStr === todayStr;

                    return (
                        <div key={dayStr} className={`p-2 rounded-lg ${isToday ? 'bg-indigo-50 border-2 border-indigo-200' : 'bg-slate-50'}`}>
                            <p className={`font-bold text-center text-sm ${isToday ? 'text-indigo-700' : 'text-slate-600'}`}>{day.toLocaleDateString('es-ES', { weekday: 'long' })}</p>
                            <p className="text-center text-xs text-slate-500 mb-2">{day.toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit' })}</p>
                            <div className="space-y-1">
                                {tasks.length > 0 ? (
                                    tasks.map(task => (
                                        <a href={`#admin/cases/${task.caseId}`} key={task.id} className="block p-1.5 bg-white border border-slate-200 rounded-md text-xs hover:bg-slate-100 hover:border-slate-300">
                                            <p className="font-semibold text-slate-700 truncate">{task.text}</p>
                                            <p className="text-slate-500">Caso: {task.caseId}</p>
                                        </a>
                                    ))
                                ) : (
                                    <div className="text-center text-xs text-slate-400 pt-2">-</div>
                                )}
                            </div>
                        </div>
                    )
                })}
            </div>
        </Card>
    );
}

const KPIStat = ({ title, value, icon }) => (
    <Card className="flex items-center gap-4">
        <div className="p-3 bg-indigo-100 text-indigo-600 rounded-lg">
           {icon}
        </div>
        <div>
            <p className="text-sm text-slate-500">{title}</p>
            <p className="text-2xl font-bold text-slate-800">{value}</p>
        </div>
    </Card>
);

const CaseDetailPage = ({ caseId }) => {
    const { complaints, updateComplaint, companies, plans } = useData();
    const { user, allUsers, updateUser } = useAuth();
    const [activeTab, setActiveTab] = useState('details');
    const complaint = complaints.find(c => c.id === caseId);

    // Track visit
    useEffect(() => {
        if(user && caseId){
             const newLastVisited = { ...user.lastVisited, [caseId]: new Date().toISOString() };
             updateUser(user.uid, { lastVisited: newLastVisited });
        }
    }, [caseId, user?.uid]);


    const userCompany = useMemo(() => companies.find(c => c.id === user.companyId), [companies, user]);
    const userPlan = useMemo(() => plans.find(p => p.id === userCompany?.planId), [plans, userCompany]);
    const features = useMemo(() => userPlan?.features || {}, [userPlan]);
    
    if (!complaint) return <Card><h1 className="text-2xl font-bold text-slate-800 mb-6">Caso no encontrado</h1><a href="#admin/dashboard" className="text-indigo-600 hover:underline text-sm flex items-center gap-1"><ChevronLeft className="w-4 h-4"/> Volver al Dashboard</a></Card>

    const companyInvestigators = useMemo(() => {
        return allUsers.filter(u => u.companyId === complaint.companyId && (u.role === 'investigador' || u.role === 'admin'));
    }, [allUsers, complaint]);

    const severityColors = {
        'Leve': 'bg-emerald-100 text-emerald-800 border-emerald-300',
        'Moderado': 'bg-amber-100 text-amber-800 border-amber-300',
        'Grave': 'bg-red-100 text-red-800 border-red-300',
        'Sin Asignar': 'bg-slate-100 text-slate-800 border-slate-300'
    };

    const allTabs = [
        { id: 'details', label: 'Detalles', icon: <ClipboardList className="w-5 h-5"/>, feature: 'edicionDenuncias' },
        { id: 'timeline', label: 'Línea de Tiempo', icon: <Clock className="w-5 h-5"/>, feature: 'lineaTiempoDinamica' },
        { id: 'measures', label: 'Medidas de Resguardo', icon: <Shield className="w-5 h-5"/>, feature: 'gestionMedidas' },
        { id: 'managements', label: 'Gestiones', icon: <ListChecks className="w-5 h-5"/>, feature: 'planGestion' },
        { id: 'files', label: 'Archivos', icon: <Paperclip className="w-5 h-5"/>, feature: 'gestionArchivos' },
        { id: 'sanctions', label: 'Sanciones', icon: <Activity className="w-5 h-5"/>, feature: 'gestionSanciones' },
        { id: 'communications', label: 'Comunicaciones', icon: <MessageSquare className="w-5 h-5"/>, feature: 'comunicacionConDenunciante' },
        { id: 'internal_comments', label: 'Comentarios Internos', icon: <MessageSquare className="w-5 h-5"/>, feature: 'comentariosInternos' },
        { id: 'audit', label: 'Auditoría', icon: <History className="w-5 h-5"/>, feature: 'auditoriaCompleta' }
    ];

    const visibleTabs = allTabs.filter(tab => tab.id === 'details' || (features && features[tab.feature]));

    const handleSeverityChange = (e) => updateComplaint(caseId, { severity: e.target.value }, user);
    const handleInvestigationFlowChange = (updates) => updateComplaint(caseId, updates, user);
    
    const handleSendPublicMessage = (text) => {
        const newMessage = { id: uuidv4(), text, senderId: user.uid, senderName: user.name, timestamp: new Date().toISOString() };
        const newAuditLog = [...complaint.auditLog, { id: uuidv4(), action: `Gestor envió un mensaje al denunciante.`, userId: user.uid, timestamp: new Date().toISOString() }];
        updateComplaint(complaint.id, { chatMessages: [...(complaint.chatMessages || []), newMessage], auditLog: newAuditLog }, user);
    };
    
    const handleSendInternalComment = (text) => {
        const newComment = { id: uuidv4(), text, senderId: user.uid, senderName: user.name, timestamp: new Date().toISOString() };
        const newAuditLog = [...complaint.auditLog, { id: uuidv4(), action: `Añadió un comentario interno.`, userId: user.uid, timestamp: new Date().toISOString() }];
        updateComplaint(complaint.id, { internalComments: [...(complaint.internalComments || []), newComment], auditLog: newAuditLog }, user);
    };

    return (
        <div className="space-y-6">
            <div className="flex justify-between items-start flex-wrap gap-4">
                <div>
                    <a href="#admin/dashboard" className="text-indigo-600 hover:underline text-sm flex items-center gap-1">
                        <ChevronLeft className="w-4 h-4"/> Volver al Dashboard
                    </a>
                    <h1 className="text-2xl font-bold text-slate-800 mt-1">Caso: {caseId}</h1>
                </div>
                <div className="flex items-center gap-2 flex-wrap">
                    <span className={`px-3 py-1.5 rounded-md text-sm font-semibold border ${severityColors[complaint.severity]}`}>{complaint.severity}</span>
                    <Select id="severity" value={complaint.severity} onChange={handleSeverityChange}>
                        <option>Sin Asignar</option><option>Leve</option><option>Moderado</option><option>Grave</option>
                    </Select>
                </div>
            </div>
             <Card className="p-4">
                <AssignInvestigators complaint={complaint} investigators={companyInvestigators}/>
            </Card>
            {features.definicionFlujo && (
              <Card className="p-4 bg-slate-50">
                  <InvestigationFlowManager complaint={complaint} onUpdate={handleInvestigationFlowChange} />
              </Card>
            )}

            <div className="border-b border-slate-200">
                <nav className="-mb-px flex space-x-6 overflow-x-auto">
                    {visibleTabs.map(tab => (
                        <button key={tab.id} onClick={() => setActiveTab(tab.id)}
                            className={`flex-shrink-0 flex items-center gap-2 py-3 px-1 border-b-2 text-sm font-medium ${activeTab === tab.id ? 'border-indigo-500 text-indigo-600' : 'border-transparent text-slate-500 hover:text-slate-700 hover:border-slate-300'}`}>
                            {tab.icon} {tab.label}
                        </button>
                    ))}
                </nav>
            </div>

            <div>
                 {activeTab === 'details' && <DetailsTab complaint={complaint} features={features} />}
                 {activeTab === 'timeline' && features.lineaTiempoDinamica && <TimelineTab complaint={complaint} />}
                 {activeTab === 'measures' && features.gestionMedidas && <MeasuresTab complaint={complaint} />}
                 {activeTab === 'managements' && features.planGestion && <ManagementsTab complaint={complaint} />}
                 {activeTab === 'files' && features.gestionArchivos && <FilesTab complaint={complaint} />}
                 {activeTab === 'sanctions' && features.gestionSanciones && <SanctionsTab complaint={complaint} />}
                 {activeTab === 'communications' && features.comunicacionConDenunciante && <ChatTab title="Comunicaciones con Denunciante" messages={complaint.chatMessages || []} onSendMessage={handleSendPublicMessage} currentUserId={user.uid} placeholder="Escribe un mensaje para el denunciante..." currentUserColor="bg-indigo-100" otherUserColor="bg-slate-200" />}
                 {activeTab === 'internal_comments' && features.comentariosInternos && <ChatTab title="Comentarios Internos" messages={complaint.internalComments || []} onSendMessage={handleSendInternalComment} currentUserId={user.uid} placeholder="Escribe un comentario interno..." currentUserColor="bg-amber-100" otherUserColor="bg-slate-200" />}
                 {activeTab === 'audit' && features.auditoriaCompleta && <AuditLogTab auditLog={complaint.auditLog} />}
            </div>
        </div>
    );
};

const InvestigationFlowManager = ({ complaint, onUpdate }) => {
    
    const handleChange = (field, value) => {
        const updates = { [field]: value };
        if (field === 'receptionType') {
            updates.internalAction = null;
        }
        onUpdate(updates);
    };

    return (
        <div>
            <h3 className="text-lg font-semibold text-slate-800 mb-2">Definición del Flujo de Investigación</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <Select label="Origen de la Denuncia" id="receptionType" value={complaint.receptionType || ''} onChange={e => handleChange('receptionType', e.target.value)}>
                    <option value="" disabled>-- Seleccione una opción --</option>
                    <option value="interna">Recibida internamente</option>
                    <option value="notificada">Notificada por Dirección del Trabajo</option>
                </Select>

                {complaint.receptionType === 'interna' && (
                    <Select label="Acción a Tomar" id="internalAction" value={complaint.internalAction || ''} onChange={e => handleChange('internalAction', e.target.value)}>
                        <option value="" disabled>-- Seleccione una opción --</option>
                        <option value="investigar">Realizar investigación interna</option>
                        <option value="derivar">Derivar a la DT</option>
                    </Select>
                )}
                
                {complaint.receptionType === 'notificada' && (
                    <>
                        <Input label="Fecha de la Denuncia (DT)" type="date" value={complaint.dtComplaintDate || ''} onChange={(e) => handleChange('dtComplaintDate', e.target.value)} />
                        <Input label="Fecha de Recepción Notificación" type="date" value={complaint.dtReceptionDate || ''} onChange={(e) => handleChange('dtReceptionDate', e.target.value)} />
                    </>
                )}
            </div>
        </div>
    )
}

const AssignInvestigators = ({ complaint, investigators }) => {
    const { updateComplaint } = useData();
    const { user, allUsers } = useAuth();
    const [isAssigning, setIsAssigning] = useState(false);
    const [tempSelectedIds, setTempSelectedIds] = useState(complaint.investigatorIds || []);

    useEffect(() => {
        setTempSelectedIds(complaint.investigatorIds || []);
    }, [complaint.investigatorIds]);
    
    const handleCheckboxChange = (id) => setTempSelectedIds(prev => prev.includes(id) ? prev.filter(i => i !== id) : [...prev, id]);

    const handleSave = () => {
        const investigatorNames = tempSelectedIds.map(id => allUsers.find(u => u.uid === id)?.name || '?').join(', ');
        const newAuditLog = [...complaint.auditLog, { id: uuidv4(), action: `Caso asignado a: ${investigatorNames || 'Nadie'}.`, userId: user.uid, timestamp: new Date().toISOString() }];
        updateComplaint(complaint.id, { investigatorIds: tempSelectedIds, auditLog: newAuditLog }, user);
        setIsAssigning(false);
    };
    
    const handleCancel = () => {
        setTempSelectedIds(complaint.investigatorIds || []);
        setIsAssigning(false);
    };

    const assignedNames = (complaint.investigatorIds || []).map(id => investigators.find(i => i.uid === id)?.name).filter(Boolean).join(', ');

    if (!isAssigning) {
        return (
            <div className="flex justify-between items-center flex-wrap gap-2">
                <div>
                    <p className="text-sm font-medium text-slate-500">Investigador(es) Asignado(s)</p>
                    <p className="font-semibold">{assignedNames || 'Nadie asignado'}</p>
                </div>
                <Button onClick={() => setIsAssigning(true)} variant="secondary">Asignar / Modificar</Button>
            </div>
        );
    }
    
    return (
        <div>
            <p className="text-sm font-medium text-slate-700 mb-2">Seleccione Investigadores</p>
            <div className="space-y-2 max-h-48 overflow-y-auto p-2 border rounded-md">
                {investigators.map(inv => (
                    <label key={inv.uid} className="flex items-center gap-2 p-2 hover:bg-slate-100 rounded-md cursor-pointer">
                        <input type="checkbox" checked={tempSelectedIds.includes(inv.uid)} onChange={() => handleCheckboxChange(inv.uid)}
                            className="h-4 w-4 rounded border-slate-300 text-indigo-600 focus:ring-indigo-500"/>
                        <span>{inv.name} ({inv.role})</span>
                    </label>
                ))}
            </div>
            <div className="flex justify-end gap-2 mt-4">
                <Button onClick={handleCancel} variant="secondary">Cancelar</Button>
                <Button onClick={handleSave}>Guardar Asignación</Button>
            </div>
        </div>
    );
};

const DetailsTab = ({ complaint, features }) => {
    const { getCompanyConfig } = useConfig();
    const { updateComplaint } = useData();
    const { user } = useAuth();
    const [editModalOpen, setEditModalOpen] = useState(false);
    const [fieldToEdit, setFieldToEdit] = useState(null);

    const config = getCompanyConfig(complaint.companyId);

    const openEditModal = (field) => {
        setFieldToEdit(field);
        setEditModalOpen(true);
    };

    const handleEditSave = (newValue) => {
        if (!fieldToEdit) return;
        const dataKey = fieldToEdit.dataKey;
        const newEditedData = { ...complaint.editedData, [dataKey]: newValue };
        const newAuditLog = [...complaint.auditLog, { id: uuidv4(), action: `Campo '${fieldToEdit.label}' modificado.`, userId: user.uid, timestamp: new Date().toISOString() }];
        updateComplaint(complaint.id, { editedData: newEditedData, auditLog: newAuditLog }, user);
        setEditModalOpen(false);
        setFieldToEdit(null);
    };

    const handleRevert = (dataKey, fieldLabel) => {
        const newEditedData = { ...complaint.editedData };
        delete newEditedData[dataKey];
        const newAuditLog = [...complaint.auditLog, { id: uuidv4(), action: `Campo '${fieldLabel}' restaurado a su valor original.`, userId: user.uid, timestamp: new Date().toISOString() }];
        updateComplaint(complaint.id, { editedData: newEditedData, auditLog: newAuditLog }, user);
    };

    return (
        <Card>
            <h3 className="text-lg font-semibold text-slate-800 mb-4">Detalles de la Denuncia</h3>
            <div className="space-y-6">
                {config.formSteps.map(step => (
                    <div key={step.id}>
                        <h4 className="text-md font-semibold text-indigo-700 mb-2">{step.title}</h4>
                        <dl className="space-y-3 text-sm">
                            {step.fields.map(field => {
                                const originalValue = getNestedValue(complaint.originalData, field.dataKey);
                                const editedValue = getNestedValue(complaint.editedData, field.dataKey);
                                const hasBeenEdited = editedValue !== undefined;
                                const currentValue = hasBeenEdited ? editedValue : originalValue;
                                
                                const isComplexField = ['witnesses', 'documents', 'accusedPersons'].includes(field.type);
                                
                                if (isComplexField && Array.isArray(currentValue)) {
                                    return (
                                        <div key={field.id} className="grid md:grid-cols-3 gap-2 items-start">
                                            <dt className="text-slate-500">{field.label}:</dt>
                                            <dd className="col-span-2 text-slate-700 font-medium">
                                                {currentValue.map((item, index) => (
                                                    <div key={item.id || index} className="mb-2 p-2 border rounded-md bg-slate-50">
                                                         {field.type === 'accusedPersons' && (
                                                            <>
                                                                <p className="font-semibold">Persona Denunciada #{index + 1}: {item.name || 'N/A'}</p>
                                                                <p>Cargo: {item.position || 'N/A'}</p>
                                                                <p>Tipo: {item.employeeType || 'N/A'}</p>
                                                                {item.employeeType === 'Trabajador de otra empresa' && (
                                                                    <p>Empleador: {item.employerName || 'N/A'}</p>
                                                                )}
                                                            </>
                                                        )}
                                                        {field.type === 'witnesses' && <p>{item.name || 'Testigo sin nombre'}</p>}
                                                        {field.type === 'documents' && <p>{item.fileName || 'Archivo sin nombre'}</p>}
                                                    </div>
                                                ))}
                                            </dd>
                                        </div>
                                    )
                                }

                                const displayValue = currentValue === undefined || currentValue === null || currentValue === '' ? 'N/A' : String(currentValue);

                                return (
                                    <div key={field.id} className="grid md:grid-cols-3 gap-2 items-start">
                                        <dt className="text-slate-500">{field.label}:</dt>
                                        <dd className="col-span-2 text-slate-700 font-medium flex items-center justify-between">
                                            <span>{displayValue}</span>
                                            <div className="flex items-center gap-1">
                                                {hasBeenEdited && (
                                                    <Tooltip text={`Original: ${getNestedValue(complaint.originalData, field.dataKey)}`}>
                                                        <Info className="w-4 h-4 text-sky-500 cursor-help"/>
                                                    </Tooltip>
                                                )}
                                                {features.edicionDenuncias && field.editableOnManage && (
                                                    <Button variant="ghost" className="text-xs p-1 h-auto" onClick={() => openEditModal({ ...field, currentValue })}>
                                                        <Edit className="w-3 h-3"/>
                                                    </Button>
                                                )}
                                                {features.edicionDenuncias && hasBeenEdited && (
                                                     <Button variant="ghost" className="text-xs p-1 h-auto" onClick={() => handleRevert(field.dataKey, field.label)}>
                                                        <RotateCcw className="w-3 h-3 text-amber-600"/>
                                                    </Button>
                                                )}
                                            </div>
                                        </dd>
                                    </div>
                                );
                            })}
                        </dl>
                    </div>
                ))}
            </div>
            {fieldToEdit && (
                <EditFieldModal
                    isOpen={editModalOpen}
                    onClose={() => setEditModalOpen(false)}
                    field={fieldToEdit}
                    onSave={handleEditSave}
                />
            )}
        </Card>
    );
};


const EditFieldModal = ({ isOpen, onClose, field, onSave }) => {
    const [value, setValue] = useState(field.currentValue);

    useEffect(() => {
        setValue(field.currentValue);
    }, [field]);

    const handleSubmit = (e) => {
        e.preventDefault();
        onSave(value);
    };

    return (
        <Modal isOpen={isOpen} onClose={onClose} title={`Editar: ${field.label}`}>
            <form onSubmit={handleSubmit} className="space-y-4">
                <Input
                    label="Nuevo Valor"
                    id={`edit-${field.id}`}
                    value={value || ''}
                    onChange={(e) => setValue(e.target.value)}
                    required autoFocus
                />
                <div className="flex justify-end gap-3 pt-4">
                    <Button type="button" onClick={onClose} variant="secondary">Cancelar</Button>
                    <Button type="submit" variant="primary">Guardar</Button>
                </div>
            </form>
        </Modal>
    );
};


const ManagementsTab = ({ complaint }) => {
    const { user, allUsers } = useAuth();
    const { updateComplaint } = useData();
    const { addToast } = useNotification();
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [confirmModalOpen, setConfirmModalOpen] = useState(false);
    const [itemToModify, setItemToModify] = useState(null);

    const companyUsers = allUsers.filter(u => u.companyId === complaint.companyId);
    
    const handleSave = (itemData) => {
        let updatedManagements;
        let action;

        if(itemData.id) { // Editing existing
             updatedManagements = complaint.managements.map(m => m.id === itemData.id ? { ...m, ...itemData } : m);
             action = `Gestión editada: "${itemData.text}"`;
        } else { // Adding new
             const newItem = { id: uuidv4(), ...itemData, completed: false };
             updatedManagements = [...complaint.managements, newItem];
             action = `Nueva gestión creada: "${newItem.text}"`;
        }
        
        const newAuditLogEntry = { id: uuidv4(), action, userId: user.uid, timestamp: new Date().toISOString() };
        updateComplaint(complaint.id, { managements: updatedManagements, auditLog: [...complaint.auditLog, newAuditLogEntry] }, user);
        addToast(itemData.id ? "Gestión actualizada" : "Gestión añadida", "success");
        setIsModalOpen(false);
        setItemToModify(null);
    };
    
    const handleEditClick = (item) => {
        setItemToModify(item);
        setIsModalOpen(true);
    }
    
    const handleAddClick = () => {
        setItemToModify(null);
        setIsModalOpen(true);
    }

    const handleToggleComplete = (managementId) => {
        const updatedManagements = complaint.managements.map(m => m.id === managementId ? {...m, completed: !m.completed } : m);
        const newStatus = updatedManagements.find(m => m.id === managementId).completed;
        const newAuditLogEntry = { id: uuidv4(), action: `Gestión "${updatedManagements.find(m => m.id === managementId).text}" marcada como ${newStatus ? 'completada' : 'pendiente'}.`, userId: user.uid, timestamp: new Date().toISOString() };
        updateComplaint(complaint.id, { managements: updatedManagements, auditLog: [...complaint.auditLog, newAuditLogEntry] }, user);
    };
    
    const handleDeleteClick = (management) => {
        setItemToModify(management);
        setConfirmModalOpen(true);
    };

    const confirmDelete = () => {
        if (!itemToModify) return;
        
        const managementText = itemToModify.text;
        const updatedManagements = complaint.managements.filter(m => m.id !== itemToModify.id);
        const newAuditLogEntry = { id: uuidv4(), action: `Gestión eliminada: "${managementText}"`, userId: user.uid, timestamp: new Date().toISOString() };
        updateComplaint(complaint.id, { managements: updatedManagements, auditLog: [...complaint.auditLog, newAuditLogEntry] }, user);
        addToast("Gestión eliminada", "success");
        setConfirmModalOpen(false);
        setItemToModify(null);
    };

    return (
        <Card>
            <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-slate-800">Plan de Gestión</h3>
                <Button onClick={handleAddClick} variant="primary">
                    <Plus className="w-4 h-4"/> Añadir Gestión
                </Button>
            </div>

            <div className="space-y-3">
                {complaint.managements.length > 0 ? (
                    complaint.managements.map(m => (
                        <div key={m.id} className={`p-3 rounded-lg flex items-start gap-4 transition-colors ${m.completed ? 'bg-emerald-50 border-emerald-200' : 'bg-white border-slate-200'} border`}>
                            <input type="checkbox" checked={m.completed} onChange={() => handleToggleComplete(m.id)}
                                className="h-5 w-5 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500 cursor-pointer mt-1 flex-shrink-0"
                            />
                            <div className="flex-1">
                                <p className={`text-slate-800 ${m.completed ? 'line-through text-slate-500' : ''}`}>{m.text}</p>
                                <div className="text-xs text-slate-500 flex items-center gap-4 mt-1">
                                    <span className="flex items-center gap-1"><User className="w-3 h-3"/>{getUserNameById(m.assignedTo, allUsers)}</span>
                                    {m.dueDate && <span className="flex items-center gap-1"><Calendar className="w-3 h-3"/>Vence: {m.dueDate}</span>}
                                </div>
                            </div>
                            <div className="flex gap-1">
                                <Button variant="ghost" className="p-1 h-auto" onClick={() => handleEditClick(m)}><Edit className="w-4 h-4 text-slate-500"/></Button>
                                <Button variant="ghost" className="p-1 h-auto" onClick={() => handleDeleteClick(m)}><Trash className="w-4 h-4 text-red-500"/></Button>
                            </div>
                        </div>
                    ))
                ) : (
                    <p className="text-center text-slate-500 py-4">No hay gestiones asignadas a este caso.</p>
                )}
            </div>

            <AddItemModal 
                isOpen={isModalOpen} 
                onClose={() => setIsModalOpen(false)} 
                onSubmit={handleSave}
                title={itemToModify ? "Editar Gestión" : "Añadir Nueva Gestión"}
                initialState={itemToModify || { text: '', assignedTo: companyUsers[0]?.uid || '', dueDate: '' }}
                isEditing={!!itemToModify}
            >
                {(formData, handleChange) => (
                    <>
                        <TextArea label="Descripción de la Tarea" id="mng-text" value={formData.text} onChange={e => handleChange('text', e.target.value)} required />
                        <Select label="Asignar A" id="mng-assign" value={formData.assignedTo} onChange={e => handleChange('assignedTo', e.target.value)} required>
                            {companyUsers.map(u => <option key={u.uid} value={u.uid}>{u.name}</option>)}
                        </Select>
                        <Input label="Fecha de Vencimiento (Opcional)" id="mng-due" type="date" value={formData.dueDate} onChange={e => handleChange('dueDate', e.target.value)} />
                    </>
                )}
            </AddItemModal>

            <ConfirmationModal isOpen={confirmModalOpen} onClose={() => setConfirmModalOpen(false)} onConfirm={confirmDelete} title="Confirmar Eliminación">
                <p>¿Está seguro de que desea eliminar esta gestión? Esta acción no se puede deshacer.</p>
            </ConfirmationModal>
        </Card>
    );
};

const FilesTab = ({ complaint }) => {
    const { user, allUsers } = useAuth();
    const { updateComplaint } = useData();
    const { addToast } = useNotification();
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [fileToModify, setFileToModify] = useState(null);
    const [fileToDelete, setFileToDelete] = useState(null);

    const orderedCategories = ["prueba denunciante", "prueba denunciado", "contexto", "documentación laboral", "otros"];

    const groupedFiles = useMemo(() => {
        const groups = orderedCategories.reduce((acc, cat) => ({ ...acc, [cat]: [] }), {});
        (complaint.caseFiles || []).forEach(file => {
            const category = file.category || 'otros';
            if (groups[category]) {
                groups[category].push(file);
            } else {
                groups['otros'].push(file);
            }
        });
        return groups;
    }, [complaint.caseFiles, orderedCategories]);

    const handleSaveFile = (itemData) => {
        const updatedFiles = complaint.caseFiles.map(f => f.id === itemData.id ? { ...f, ...itemData } : f);
        const newAuditLogEntry = { id: uuidv4(), action: `Archivo editado: "${itemData.fileName}"`, userId: user.uid, timestamp: new Date().toISOString() };
        updateComplaint(complaint.id, { caseFiles: updatedFiles, auditLog: [...complaint.auditLog, newAuditLogEntry] }, user);
        addToast("Archivo actualizado", "success");
        setFileToModify(null);
        setIsModalOpen(false);
    };
    
    const handleAddFile = (newFileData) => {
        const newFile = {
            id: uuidv4(),
            ...newFileData,
            uploadedByUserId: user.uid,
            uploadedAt: new Date().toISOString(),
        };
        const newAuditLogEntry = {
            id: uuidv4(),
            action: `Nuevo archivo subido: "${newFile.fileName}"`,
            userId: user.uid,
            timestamp: new Date().toISOString()
        };
        const updatedFiles = [...(complaint.caseFiles || []), newFile];
        updateComplaint(complaint.id, { 
            caseFiles: updatedFiles, 
            auditLog: [...complaint.auditLog, newAuditLogEntry] 
        }, user);
        addToast("Archivo añadido", "success");
        setIsModalOpen(false);
        setFileToModify(null);
    };

    const confirmDeleteFile = () => {
        if (!fileToDelete) return;

        const fileName = fileToDelete.fileName;
        const updatedFiles = complaint.caseFiles.filter(f => f.id !== fileToDelete.id);
        const newAuditLogEntry = {
            id: uuidv4(),
            action: `Archivo eliminado: "${fileName}"`,
            userId: user.uid,
            timestamp: new Date().toISOString()
        };
        updateComplaint(complaint.id, {
            caseFiles: updatedFiles,
            auditLog: [...complaint.auditLog, newAuditLogEntry]
        }, user);
        addToast("Archivo eliminado", "success");
        setFileToDelete(null);
    };
    
    const handleAddClick = () => {
        setFileToModify(null);
        setIsModalOpen(true);
    };

    const handleEditClick = (file) => {
        setFileToModify(file);
        setIsModalOpen(true);
    };

    return (
        <Card>
            <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-slate-800">Gestión de Archivos</h3>
                <Button onClick={handleAddClick} variant="primary">
                    <Plus className="w-4 h-4"/> Añadir Archivo
                </Button>
            </div>
            <div className="space-y-6">
                {(complaint.caseFiles || []).length > 0 ? (
                    orderedCategories.map(category => {
                        const filesInCategory = groupedFiles[category];
                        if (!filesInCategory || filesInCategory.length === 0) {
                            return null;
                        }
                        return (
                            <div key={category}>
                                <h4 className="text-md font-semibold text-indigo-700 mb-3 capitalize border-b pb-2">
                                    {category}
                                </h4>
                                <div className="space-y-3">
                                    {filesInCategory.map(file => (
                                        <div key={file.id} className="p-4 border rounded-lg bg-white flex items-start gap-4">
                                            <Paperclip className="w-6 h-6 text-slate-400 mt-1 flex-shrink-0" />
                                            <div className="flex-1">
                                                <p className="font-semibold text-slate-800">{file.fileName}</p>
                                                <p className="text-sm text-slate-600 mt-1">{file.description}</p>
                                                <p className="text-xs text-slate-400 mt-2">
                                                    Subido por {getUserNameById(file.uploadedByUserId, allUsers)} el {new Date(file.uploadedAt).toLocaleDateString()}
                                                </p>
                                            </div>
                                             <div className="flex gap-1">
                                                <Button variant="ghost" className="p-1 h-auto" onClick={() => handleEditClick(file)}><Edit className="w-4 h-4 text-slate-500"/></Button>
                                                <Button variant="ghost" className="p-1 h-auto" onClick={() => setFileToDelete(file)}><Trash className="w-4 h-4 text-red-500"/></Button>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        );
                    })
                ) : (
                    <p className="text-center text-slate-500 py-4">No hay archivos adjuntos a este caso.</p>
                )}
            </div>

            <AddItemModal
                isOpen={isModalOpen}
                onClose={() => {setIsModalOpen(false); setFileToModify(null);}}
                onSubmit={fileToModify ? handleSaveFile : handleAddFile}
                title={fileToModify ? "Editar Archivo" : "Añadir Nuevo Archivo"}
                initialState={fileToModify || { fileName: '', description: '', category: 'prueba denunciante' }}
                isEditing={!!fileToModify}
            >
                {(formData, handleChange) => {
                    const fileCategories = ["prueba denunciante", "prueba denunciado", "contexto", "documentación laboral", "otros"];
                    
                    const handleFileChange = (e) => {
                        if (e.target.files.length > 0) {
                            handleChange('fileName', e.target.files[0].name);
                        }
                    };

                    return (
                        <>
                            <Input label="Archivo" type="file" onChange={handleFileChange} required={!fileToModify} disabled={!!fileToModify} />
                            <Select label="Categoría" value={formData.category} onChange={e => handleChange('category', e.target.value)} required>
                                {fileCategories.map(cat => <option key={cat} value={cat}>{cat}</option>)}
                            </Select>
                            <TextArea label="Descripción" value={formData.description} onChange={e => handleChange('description', e.target.value)} required />
                        </>
                    );
                }}
            </AddItemModal>
            
            {fileToDelete && (
                <ConfirmationModal
                    isOpen={!!fileToDelete}
                    onClose={() => setFileToDelete(null)}
                    onConfirm={confirmDeleteFile}
                    title="Confirmar Eliminación"
                >
                    <p>¿Está seguro de que desea eliminar el archivo <span className="font-bold">{fileToDelete.fileName}</span>? Esta acción no se puede deshacer.</p>
                </ConfirmationModal>
            )}
        </Card>
    );
};


const SanctionsTab = ({ complaint }) => {
    const { user, allUsers } = useAuth();
    const { updateComplaint } = useData();
    const { addToast } = useNotification();
    
    // State for sanctions
    const [isSanctionModalOpen, setIsSanctionModalOpen] = useState(false);
    const [sanctionToModify, setSanctionToModify] = useState(null);
    const [sanctionToDelete, setSanctionToDelete] = useState(null);

    // State for other measures
    const [isOtherMeasureModalOpen, setIsOtherMeasureModalOpen] = useState(false);
    const [otherMeasureToModify, setOtherMeasureToModify] = useState(null);
    const [otherMeasureToDelete, setOtherMeasureToDelete] = useState(null);

    const companyUsers = useMemo(() => allUsers.filter(u => u.companyId === complaint.companyId), [allUsers, complaint.companyId]);
    
    // Handlers for Sanctions
    const handleSaveSanction = (itemData) => {
        let updatedSanctions;
        let action;
        if (itemData.id) {
             updatedSanctions = complaint.sanctions.map(s => s.id === itemData.id ? { ...s, ...itemData } : s);
             action = `Sanción editada: "${itemData.type}"`;
        } else {
             const newItem = { id: uuidv4(), ...itemData };
             updatedSanctions = [...(complaint.sanctions || []), newItem];
             action = `Nueva sanción registrada: "${newItem.type}"`;
        }
        
        const newAuditLogEntry = { id: uuidv4(), action, userId: user.uid, timestamp: new Date().toISOString() };
        updateComplaint(complaint.id, { sanctions: updatedSanctions, auditLog: [...complaint.auditLog, newAuditLogEntry] }, user);
        addToast(itemData.id ? "Sanción actualizada" : "Sanción añadida", "success");
        setIsSanctionModalOpen(false);
        setSanctionToModify(null);
    };

    const confirmDeleteSanction = () => {
        if (!sanctionToDelete) return;
        const sanctionType = sanctionToDelete.type;
        const updatedSanctions = complaint.sanctions.filter(s => s.id !== sanctionToDelete.id);
        const newAuditLogEntry = { id: uuidv4(), action: `Sanción eliminada: "${sanctionType}"`, userId: user.uid, timestamp: new Date().toISOString() };
        updateComplaint(complaint.id, { sanctions: updatedSanctions, auditLog: [...complaint.auditLog, newAuditLogEntry] }, user);
        addToast("Sanción eliminada", "success");
        setSanctionToDelete(null);
    };
    
    // Handlers for Other Measures
    const handleSaveOtherMeasure = (itemData) => {
        let updatedMeasures;
        let action;
        if(itemData.id) {
            updatedMeasures = (complaint.otherMeasures || []).map(m => m.id === itemData.id ? { ...m, ...itemData } : m);
            action = `Otra medida editada: "${itemData.description}"`;
        } else {
            const newItem = { id: uuidv4(), ...itemData };
            updatedMeasures = [...(complaint.otherMeasures || []), newItem];
            action = `Nueva otra medida registrada: "${newItem.description}"`;
        }
        
        const newAuditLogEntry = { id: uuidv4(), action, userId: user.uid, timestamp: new Date().toISOString() };
        updateComplaint(complaint.id, { otherMeasures: updatedMeasures, auditLog: [...complaint.auditLog, newAuditLogEntry] }, user);
        addToast(itemData.id ? "Medida actualizada" : "Medida añadida", "success");
        setIsOtherMeasureModalOpen(false);
        setOtherMeasureToModify(null);
    };

    const confirmDeleteOtherMeasure = () => {
        if (!otherMeasureToDelete) return;
        const measureDesc = otherMeasureToDelete.description;
        const updatedMeasures = (complaint.otherMeasures || []).filter(m => m.id !== otherMeasureToDelete.id);
        const newAuditLogEntry = { id: uuidv4(), action: `Otra medida eliminada: "${measureDesc}"`, userId: user.uid, timestamp: new Date().toISOString() };
        updateComplaint(complaint.id, { otherMeasures: updatedMeasures, auditLog: [...complaint.auditLog, newAuditLogEntry] }, user);
        addToast("Medida eliminada", "success");
        setOtherMeasureToDelete(null);
    };

    const sanctionTypes = ["Amonestación verbal", "Amonestación escrita", "Multa", "Desvinculación"];

    return (
        <Card>
            <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-slate-800">Sanciones</h3>
                <Button onClick={() => { setSanctionToModify(null); setIsSanctionModalOpen(true); }} variant="primary">
                    <Plus className="w-4 h-4"/> Registrar Sanción
                </Button>
            </div>
            <div className="space-y-3">
                {(complaint.sanctions || []).map(s => (
                    <div key={s.id} className="p-4 rounded-lg bg-white border border-slate-200">
                       <div className="flex justify-between items-start">
                            <div>
                                <p className="font-bold text-red-700">{s.type}</p>
                                <p className="text-sm text-slate-600 mt-1">{s.description}</p>
                            </div>
                            <div className="flex gap-1">
                                <Button variant="ghost" className="p-1 h-auto" onClick={() => { setSanctionToModify(s); setIsSanctionModalOpen(true); }}><Edit className="w-4 h-4 text-slate-500"/></Button>
                                <Button variant="ghost" className="p-1 h-auto" onClick={() => setSanctionToDelete(s)}><Trash className="w-4 h-4 text-red-500"/></Button>
                            </div>
                       </div>
                        <div className="text-xs text-slate-500 flex items-center gap-4 mt-2 border-t pt-2">
                            <span className="flex items-center gap-1"><Calendar className="w-3 h-3"/>Aplicada: {new Date(s.applicationDate + 'T00:00:00').toLocaleDateString()}</span>
                            <span className="flex items-center gap-1"><User className="w-3 h-3"/>Responsable: {getUserNameById(s.responsibleUserId, allUsers)}</span>
                        </div>
                    </div>
                ))}
            </div>

            <div className="mt-8 pt-6 border-t">
                <div className="flex justify-between items-center mb-4">
                    <h3 className="text-lg font-semibold text-slate-800">Otras Medidas</h3>
                    <Button onClick={() => { setOtherMeasureToModify(null); setIsOtherMeasureModalOpen(true); }} variant="secondary">
                        <Plus className="w-4 h-4"/> Añadir Otra Medida
                    </Button>
                </div>
                 <div className="space-y-3">
                    {(complaint.otherMeasures || []).map(m => (
                        <div key={m.id} className="p-4 rounded-lg bg-white border border-slate-200">
                           <div className="flex justify-between items-start">
                                <p className="text-sm text-slate-600 mt-1">{m.description}</p>
                                <div className="flex gap-1">
                                    <Button variant="ghost" className="p-1 h-auto" onClick={() => { setOtherMeasureToModify(m); setIsOtherMeasureModalOpen(true); }}><Edit className="w-4 h-4 text-slate-500"/></Button>
                                    <Button variant="ghost" className="p-1 h-auto" onClick={() => setOtherMeasureToDelete(m)}><Trash className="w-4 h-4 text-red-500"/></Button>
                                </div>
                           </div>
                            <div className="text-xs text-slate-500 flex items-center gap-4 mt-2 border-t pt-2">
                                <span className="flex items-center gap-1"><Calendar className="w-3 h-3"/>Fecha: {new Date(m.date + 'T00:00:00').toLocaleDateString()}</span>
                                <span className="flex items-center gap-1"><User className="w-3 h-3"/>Responsable: {getUserNameById(m.responsibleUserId, allUsers)}</span>
                            </div>
                        </div>
                    ))}
                </div>
            </div>

            <AddItemModal 
                isOpen={isSanctionModalOpen}
                onClose={() => {setIsSanctionModalOpen(false); setSanctionToModify(null);}}
                onSubmit={handleSaveSanction}
                title={sanctionToModify ? "Editar Sanción" : "Registrar Nueva Sanción"}
                initialState={sanctionToModify || { type: 'Amonestación verbal', description: '', applicationDate: '', responsibleUserId: companyUsers[0]?.uid || '' }}
                isEditing={!!sanctionToModify}
            >
                {(formData, handleChange) => (
                    <>
                         <Select label="Tipo de Sanción" value={formData.type} onChange={e => handleChange('type', e.target.value)} required>
                            {sanctionTypes.map(t => <option key={t} value={t}>{t}</option>)}
                        </Select>
                        <TextArea label="Descripción / Fundamento" value={formData.description} onChange={e => handleChange('description', e.target.value)} required />
                        <Input label="Fecha de Aplicación" type="date" value={formData.applicationDate} onChange={e => handleChange('applicationDate', e.target.value)} required />
                        <Select label="Responsable del Seguimiento" value={formData.responsibleUserId} onChange={e => handleChange('responsibleUserId', e.target.value)} required>
                            {companyUsers.map(u => <option key={u.uid} value={u.uid}>{u.name}</option>)}
                        </Select>
                    </>
                )}
            </AddItemModal>
            
            <AddItemModal
                isOpen={isOtherMeasureModalOpen}
                onClose={() => {setIsOtherMeasureModalOpen(false); setOtherMeasureToModify(null);}}
                onSubmit={handleSaveOtherMeasure}
                title={otherMeasureToModify ? "Editar Otra Medida" : "Registrar Otra Medida"}
                initialState={otherMeasureToModify || { description: '', date: '', responsibleUserId: companyUsers[0]?.uid || '' }}
                isEditing={!!otherMeasureToModify}
            >
                {(formData, handleChange) => (
                     <>
                        <TextArea label="Descripción de la Medida" value={formData.description} onChange={e => handleChange('description', e.target.value)} required />
                        <Input label="Fecha de Aplicación" type="date" value={formData.date} onChange={e => handleChange('date', e.target.value)} required />
                        <Select label="Responsable" value={formData.responsibleUserId} onChange={e => handleChange('responsibleUserId', e.target.value)} required>
                            {companyUsers.map(u => <option key={u.uid} value={u.uid}>{u.name}</option>)}
                        </Select>
                    </>
                )}
            </AddItemModal>

            {sanctionToDelete && (
                 <ConfirmationModal isOpen={!!sanctionToDelete} onClose={() => setSanctionToDelete(null)} onConfirm={confirmDeleteSanction} title="Confirmar Eliminación">
                    <p>¿Está seguro de que desea eliminar esta sanción? Esta acción no se puede deshacer.</p>
                </ConfirmationModal>
            )}
            {otherMeasureToDelete && (
                 <ConfirmationModal isOpen={!!otherMeasureToDelete} onClose={() => setOtherMeasureToDelete(null)} onConfirm={confirmDeleteOtherMeasure} title="Confirmar Eliminación">
                    <p>¿Está seguro de que desea eliminar esta medida? Esta acción no se puede deshacer.</p>
                </ConfirmationModal>
            )}
        </Card>
    );
};


const MeasuresTab = ({ complaint }) => {
    const { user, allUsers } = useAuth();
    const { updateComplaint } = useData();
    const { addToast } = useNotification();
    const { getCompanyConfig } = useConfig();
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [itemToModify, setItemToModify] = useState(null);
    
    const companyUsers = allUsers.filter(u => u.companyId === complaint.companyId);
    const config = getCompanyConfig(complaint.companyId);
    const defaultMeasures = config.defaultSafeguardMeasures || [];

    const handleSave = (itemData) => {
        let updatedMeasures;
        let action;

        if (itemData.id) { // Editing
            updatedMeasures = complaint.safeguardMeasures.map(m => m.id === itemData.id ? { ...m, ...itemData } : m);
            action = `Medida de resguardo editada: "${itemData.text}"`;
        } else { // Adding
            const newItem = { id: uuidv4(), ...itemData };
            updatedMeasures = [...complaint.safeguardMeasures, newItem];
            action = `Nueva medida de resguardo creada: "${newItem.text}"`;
        }
        
        const newAuditLogEntry = { id: uuidv4(), action, userId: user.uid, timestamp: new Date().toISOString() };
        updateComplaint(complaint.id, { safeguardMeasures: updatedMeasures, auditLog: [...complaint.auditLog, newAuditLogEntry] }, user);
        addToast(itemData.id ? "Medida actualizada" : "Medida añadida", "success");
        setIsModalOpen(false);
        setItemToModify(null);
    };
    
    const handleEditClick = (item) => {
        setItemToModify(item);
        setIsModalOpen(true);
    };

    const handleAddClick = () => {
        setItemToModify(null);
        setIsModalOpen(true);
    };

    const handleStatusChange = (measureId, newStatus) => {
        const updatedMeasures = complaint.safeguardMeasures.map(m => m.id === measureId ? { ...m, status: newStatus } : m);
        const measureText = updatedMeasures.find(m => m.id === measureId).text;
        const newAuditLogEntry = { id: uuidv4(), action: `Estado de la medida "${measureText}" actualizado a: ${newStatus}`, userId: user.uid, timestamp: new Date().toISOString() };
        updateComplaint(complaint.id, { safeguardMeasures: updatedMeasures, auditLog: [...complaint.auditLog, newAuditLogEntry] }, user);
    };

    return (
        <Card>
            <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-slate-800">Medidas de Resguardo</h3>
                <Button onClick={handleAddClick} variant="primary">
                    <Plus className="w-4 h-4"/> Añadir Medida
                </Button>
            </div>
            <div className="space-y-3">
                {complaint.safeguardMeasures.length > 0 ? (
                    complaint.safeguardMeasures.map(m => (
                        <div key={m.id} className="p-3 border rounded-lg bg-white">
                             <div className="flex justify-between items-start">
                                <p className="text-slate-800 flex-1">{m.text}</p>
                                <Button variant="ghost" className="p-1 h-auto" onClick={() => handleEditClick(m)}><Edit className="w-4 h-4 text-slate-500"/></Button>
                            </div>
                            <div className="flex flex-wrap items-center gap-x-4 gap-y-2 text-xs text-slate-500 mt-2">
                                <div className="flex-1 min-w-[150px]">
                                    <Select value={m.status} onChange={e => handleStatusChange(m.id, e.target.value)} id={`measure-status-${m.id}`} className="text-xs p-1">
                                        {['Discusión', 'Aprobación', 'Implementación', 'Implementada', 'Seguimiento', 'Revisión'].map(s => <option key={s} value={s}>{s}</option>)}
                                    </Select>
                                </div>
                                <span className="flex items-center gap-1"><User className="w-3 h-3"/>{getUserNameById(m.assignedTo, allUsers)}</span>
                                {m.endDate && <span className="flex items-center gap-1"><Calendar className="w-3 h-3"/>Termina: {m.endDate}</span>}
                            </div>
                        </div>
                    ))
                ) : (
                     <p className="text-center text-slate-500 py-4">No hay medidas de resguardo para este caso.</p>
                )}
            </div>
             <AddMeasureModal 
                isOpen={isModalOpen}
                onClose={() => {setIsModalOpen(false); setItemToModify(null);}}
                onSubmit={handleSave}
                users={companyUsers}
                defaultMeasures={defaultMeasures}
                editingItem={itemToModify}
            />
        </Card>
    );
};

const AddMeasureModal = ({ isOpen, onClose, onSubmit, users, defaultMeasures, editingItem }) => {
    const [view, setView] = useState(editingItem ? 'custom' : 'select');
    const [itemData, setItemData] = useState(editingItem || { text: '', assignedTo: users[0]?.uid, status: 'Discusión', endDate: '' });

    useEffect(() => {
        if(editingItem) {
            setItemData(editingItem);
            setView('custom');
        } else if (isOpen) {
             setItemData({ text: '', assignedTo: users[0]?.uid, status: 'Discusión', endDate: '' });
             setView('select');
        }
    }, [isOpen, editingItem, users]);

    const handleChange = (field, value) => setItemData(prev => ({...prev, [field]: value}));
    
    const handleSubmit = (e) => {
        e.preventDefault();
        if (!itemData.text) return;
        onSubmit(itemData);
    };
    
    const handleSelectDefault = (defaultText) => {
        handleChange('text', defaultText);
        setView('custom');
    };

    return (
         <Modal isOpen={isOpen} onClose={onClose} title={editingItem ? "Editar Medida" : "Añadir Medida"}>
            {view === 'select' && !editingItem ? (
                <div className="space-y-2">
                    <p className="text-sm text-slate-600 mb-4">Seleccione una medida predefinida o ingrese una personalizada.</p>
                    {defaultMeasures.map((measure, i) => (
                        <Button key={i} variant="secondary" className="w-full justify-start" onClick={() => handleSelectDefault(measure)}>{measure}</Button>
                    ))}
                    <Button variant="primary" className="w-full justify-center" onClick={() => setView('custom')}>
                        <Edit className="w-4 h-4"/> Otra medida (personalizada)
                    </Button>
                </div>
            ) : (
                <form onSubmit={handleSubmit} className="space-y-4">
                    <TextArea label="Descripción de la Medida" id="measure-text" value={itemData.text} onChange={e => handleChange('text', e.target.value)} required />
                    <Select label="Asignar A" id="measure-assign" value={itemData.assignedTo} onChange={e => handleChange('assignedTo', e.target.value)} required>
                        {users.map(u => <option key={u.uid} value={u.uid}>{u.name}</option>)}
                    </Select>
                    <Select label="Estado" id="measure-status" value={itemData.status} onChange={e => handleChange('status', e.target.value)} required>
                        {['Discusión', 'Aprobación', 'Implementación', 'Implementada', 'Seguimiento', 'Revisión'].map(s => <option key={s} value={s}>{s}</option>)}
                    </Select>
                    <Input label="Fecha de Término (Opcional)" id="measure-enddate" type="date" value={itemData.endDate} onChange={e => handleChange('endDate', e.target.value)} />
                    <div className="flex justify-between items-center pt-4">
                         {!editingItem ? <Button type="button" onClick={() => setView('select')} variant="secondary">
                            <ChevronLeft className="w-4 h-4"/> Volver
                        </Button> : <div></div>}
                        <div className="flex gap-2">
                          <Button type="button" onClick={onClose} variant="secondary">Cancelar</Button>
                          <Button type="submit" variant="primary">{editingItem ? "Guardar Cambios" : "Añadir Medida"}</Button>
                        </div>
                    </div>
                </form>
            )}
        </Modal>
    );
};


const TimelineTab = ({ complaint }) => {
    const { getCompanyConfig } = useConfig();
    const { holidays, updateComplaint } = useData();
    const { user, allUsers } = useAuth();
    const config = getCompanyConfig(complaint.companyId);
    
    const getTimelineSettings = useCallback(() => {
        const { receptionType, internalAction } = complaint;
        if (receptionType === 'interna') {
            return internalAction === 'investigar' ? config.timelineSettings.interna : config.timelineSettings.derivada;
        } else if (receptionType === 'notificada') {
            return config.timelineSettings.notificada;
        }
        return [];
    }, [complaint, config.timelineSettings]);

    const timelineEvents = useMemo(() => {
        const settings = getTimelineSettings();
        if (!settings) return [];
        let cumulativeEndDate = new Date(complaint.createdAt);

        return settings.map((setting) => {
            let stageStartDate;
            switch(setting.countFrom) {
                case 'case-start': stageStartDate = new Date(complaint.createdAt); break;
                case 'complaint-date': stageStartDate = new Date(complaint.dtComplaintDate || complaint.createdAt); break;
                case 'reception-date': stageStartDate = new Date(complaint.dtReceptionDate || complaint.createdAt); break;
                case 'day-zero':
                    const reception = new Date(complaint.dtReceptionDate || complaint.createdAt);
                    stageStartDate = calculateEndDate(reception, 3, 'habiles-administrativos', holidays);
                    break;
                case 'previous-stage-end':
                default: stageStartDate = new Date(cumulativeEndDate);
            }
            
            const stageEndDate = calculateEndDate(stageStartDate, setting.duration, setting.dayType, holidays);
            
            const managementTasks = (complaint.managements || []).filter(m => {
                if (!m.dueDate) return false;
                const dueDate = new Date(m.dueDate + 'T00:00:00');
                return dueDate >= stageStartDate && dueDate <= stageEndDate;
            });
            
            cumulativeEndDate = stageEndDate;

            return { ...setting, startDate: stageStartDate, endDate: stageEndDate, managementTasks };
        });
    }, [complaint, getTimelineSettings, holidays]);

    const handleToggle = (stageId, subStepIndex = null) => {
        let newProgress = { ...complaint.timelineProgress };
        const settings = getTimelineSettings();
        const stage = settings.find(s => s.id === stageId);
        let logAction = '';
        
        if (subStepIndex === null) {
            const isCompleted = !newProgress[stageId];
            newProgress[stageId] = isCompleted;
            logAction = `Etapa '${stage.name}' marcada como ${isCompleted ? 'completada' : 'pendiente'}`;
            if (stage.subSteps) stage.subSteps.forEach((_, index) => { newProgress[`${stageId}_${index}`] = isCompleted; });
        } else {
            const key = `${stageId}_${subStepIndex}`;
            const isCompleted = !newProgress[key];
            newProgress[key] = isCompleted;
            logAction = `Sub-etapa '${stage.subSteps[subStepIndex].name}' marcada como ${isCompleted ? 'completada' : 'pendiente'}`;
            newProgress[stageId] = stage.subSteps.every((_, index) => newProgress[`${stageId}_${index}`]);
        }
        const newAuditLog = [...complaint.auditLog, { id: uuidv4(), action: logAction, userId: user.uid, timestamp: new Date().toISOString() }];
        updateComplaint(complaint.id, { timelineProgress: newProgress, auditLog: newAuditLog }, user);
    };

    return (
        <Card>
            <h3 className="text-lg font-semibold text-slate-800 mb-4">Línea de Tiempo del Procedimiento</h3>
            {timelineEvents.length > 0 ? (
                <div className="relative border-l-2 border-indigo-200 ml-3">
                    {timelineEvents.map((event, index) => {
                        const isCompleted = complaint.timelineProgress?.[event.id];
                        const isPreviousStageCompleted = index === 0 || complaint.timelineProgress?.[timelineEvents[index - 1].id];
                        const isDisabled = !isPreviousStageCompleted && !isCompleted; 
                        const isOverdue = new Date() > event.endDate && !isCompleted;
                       
                        return (
                            <div key={event.id} className="mb-8 ml-6">
                                <span className={`absolute flex items-center justify-center w-6 h-6 rounded-full -left-3.5 ring-8 ring-white ${isCompleted ? 'bg-emerald-500' : isOverdue ? 'bg-red-500' : 'bg-slate-300'}`}>
                                    <CheckCircle className="w-4 h-4 text-white"/>
                                </span>
                                <div className={`p-4 bg-white border rounded-lg shadow-sm`}>
                                    <div className="flex items-center gap-4">
                                        <Tooltip text={isDisabled ? "Complete la etapa anterior para habilitar esta." : ""}>
                                            <input type="checkbox" checked={isCompleted || false} disabled={isDisabled} onChange={() => handleToggle(event.id)}
                                                className={`h-5 w-5 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500 ${isDisabled ? 'cursor-not-allowed' : 'cursor-pointer'}`}/>
                                        </Tooltip>
                                        <div>
                                            <h4 className={`text-md font-semibold ${isCompleted ? 'line-through text-slate-500' : 'text-slate-800'}`}>{event.name}</h4>
                                            <p className="text-sm text-slate-500">Vence: <span className="font-medium text-slate-600">{event.endDate.toLocaleDateString()}</span></p>
                                        </div>
                                    </div>
                                    <ul className="mt-2 space-y-2 pl-8">
                                        {(event.subSteps || []).map((sub, i) => {
                                            const subKey = `${event.id}_${i}`;
                                            const isSubCompleted = complaint.timelineProgress?.[subKey];
                                            return (
                                                <li key={sub.id || i} className="flex items-center gap-2">
                                                    <input type="checkbox" checked={isSubCompleted || false} disabled={isDisabled && !isCompleted} onChange={() => handleToggle(event.id, i)}
                                                        className={`h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500 ${isDisabled && !isCompleted ? 'cursor-not-allowed' : 'cursor-pointer'}`}/>
                                                    <span className={`text-xs ${isSubCompleted ? 'line-through text-slate-400' : 'text-slate-600'}`}>{sub.name}</span>
                                                </li>
                                            );
                                        })}
                                        {(event.managementTasks || []).map(task => (
                                            <li key={task.id} className="flex items-center gap-2">
                                                <ListChecks className="w-4 h-4 text-indigo-400"/>
                                                <span className={`text-xs ${task.completed ? 'line-through text-slate-400' : 'text-slate-600'}`}>{task.text} (Gestión)</span>
                                            </li>
                                        ))}
                                    </ul>
                                </div>
                            </div>
                        );
                    })}
                </div>
            ) : (
                <p className="text-center text-slate-500 py-4">Defina el flujo de la investigación para ver la línea de tiempo.</p>
            )}
        </Card>
    );
};

const ChatTab = ({ title, messages, onSendMessage, currentUserId, placeholder, currentUserColor, otherUserColor }) => {
    const { allUsers } = useAuth();
    const [newComment, setNewComment] = useState("");
    const messagesEndRef = useRef(null);

    const scrollToBottom = () => messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    useEffect(scrollToBottom, [messages]);
    
    const handleAddComment = (e) => {
        e.preventDefault();
        if (!newComment.trim()) return;
        onSendMessage(newComment);
        setNewComment("");
    };
    
    const getUser = (senderId) => {
        if(senderId === 'complainant') return { name: 'Denunciante', uid: 'complainant' };
        return allUsers.find(u => u.uid === senderId) || { name: 'Usuario Desconocido' };
    };

    return (
        <Card>
            <h3 className="text-lg font-semibold text-slate-800 mb-4">{title}</h3>
            <div className="space-y-4 max-h-96 overflow-y-auto pr-2 mb-4 bg-slate-50 p-4 rounded-lg">
                {(messages || []).map(comment => {
                    const author = getUser(comment.senderId);
                    const isCurrentUser = author?.uid === currentUserId;
                    return (
                        <div key={comment.id} className={`flex items-start gap-3 ${isCurrentUser ? 'flex-row-reverse' : ''}`}>
                             <div className="w-8 h-8 rounded-full bg-slate-300 flex items-center justify-center text-slate-600 font-bold flex-shrink-0">{author?.name[0] || '?'}</div>
                            <div className={`p-3 rounded-lg max-w-lg ${isCurrentUser ? currentUserColor : otherUserColor}`}>
                                <p className="text-sm text-slate-800">{comment.text}</p>
                                <p className={`text-xs text-slate-500 mt-1 ${isCurrentUser ? 'text-right' : ''}`}>{author?.name} - {new Date(comment.timestamp).toLocaleString()}</p>
                            </div>
                        </div>
                    )
                })}
                <div ref={messagesEndRef} />
            </div>
            <form onSubmit={handleAddComment} className="flex items-center gap-2 border-t pt-4">
                <Input id="new-message" placeholder={placeholder} value={newComment} onChange={e => setNewComment(e.target.value)} className="flex-1"/>
                <Button type="submit" variant="primary" className="p-2.5">
                    <Send className="w-5 h-5"/>
                </Button>
            </form>
        </Card>
    );
};


const AuditLogTab = ({ auditLog }) => {
    const { allUsers } = useAuth();
    
    const getUserName = (userId) => {
        if (userId === 'public') return 'Denunciante Público';
        return getUserNameById(userId, allUsers);
    };

    return (
        <Card>
            <h3 className="text-lg font-semibold text-slate-800 mb-4">Registro de Auditoría</h3>
            <div className="relative border-l-2 border-indigo-200 ml-3">
                {(auditLog || []).slice().reverse().map(log => (
                    <div key={log.id} className="mb-6 ml-6">
                        <span className="absolute flex items-center justify-center w-6 h-6 bg-indigo-100 rounded-full -left-3.5 ring-8 ring-white">
                           <History className="w-4 h-4 text-indigo-600"/>
                        </span>
                        <div className="p-4 bg-white border border-slate-200 rounded-lg shadow-sm">
                            <div className="items-center justify-between sm:flex">
                                <time className="mb-1 text-xs font-normal text-slate-400 sm:order-last sm:mb-0">{new Date(log.timestamp).toLocaleString()}</time>
                                <div className="text-sm font-normal text-slate-500"><span className="font-semibold text-slate-800">{getUserName(log.userId)}</span> realizó la acción: <span className="font-medium text-slate-700">{log.action}</span></div>
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        </Card>
    );
};

const UserManagementPage = ({ onCancel, onCreate }) => {
    const { user, allUsers, setAllUsers } = useAuth();
    const [isModalOpen, setIsModalOpen] = useState(false);
    const { addToast } = useNotification();
    
    const companyUsers = allUsers.filter(u => u.companyId === user.companyId);

    const handleCreateUser = (newUserData) => {
        const newUser = {
            ...newUserData,
            uid: uuidv4(),
            companyId: user.companyId,
            lastVisited: {},
        };
        setAllUsers(prev => [...prev, newUser]);
        addToast("Usuario creado con éxito", "success");
        setIsModalOpen(false);
    };

    return (
        <div>
            <div className="flex justify-between items-center mb-6">
                <h1 className="text-2xl font-bold text-slate-800">Gestión de Usuarios</h1>
                <Button onClick={() => setIsModalOpen(true)} variant="primary">
                    <Plus className="w-4 h-4"/> Crear Usuario
                </Button>
            </div>
            <Card className="p-0 overflow-x-auto">
                 <table className="w-full text-sm text-left text-slate-500">
                    <thead className="text-xs text-slate-700 uppercase bg-slate-50">
                        <tr>
                            <th scope="col" className="px-6 py-3">Nombre</th>
                            <th scope="col" className="px-6 py-3">Email</th>
                            <th scope="col" className="px-6 py-3">Rol</th>
                        </tr>
                    </thead>
                    <tbody>
                        {companyUsers.map(u => (
                            <tr key={u.uid} className="bg-white border-b hover:bg-slate-50">
                                <td className="px-6 py-4 font-medium text-slate-900">{u.name}</td>
                                <td className="px-6 py-4">{u.email}</td>
                                <td className="px-6 py-4 capitalize">{u.role}</td>
                            </tr>
                        ))}
                    </tbody>
                 </table>
            </Card>
            <AddItemModal
                 isOpen={isModalOpen}
                 onClose={() => setIsModalOpen(false)}
                 onSubmit={handleCreateUser}
                 title="Crear Nuevo Usuario"
                 initialState={{ name: '', email: '', role: 'investigador', password: 'password' }}
            >
                {(formData, handleChange) => (
                     <>
                        <Input label="Nombre Completo" id="new-user-name" value={formData.name} onChange={e => handleChange('name', e.target.value)} required />
                        <Input label="Email" id="new-user-email" type="email" value={formData.email} onChange={e => handleChange('email', e.target.value)} required />
                        <Select label="Rol" id="new-user-role" value={formData.role} onChange={e => handleChange('role', e.target.value)}>
                            <option value="investigador">Investigador</option>
                            <option value="admin">Administrador</option>
                        </Select>
                        <Input label="Contraseña Temporal" id="new-user-pass" type="text" value={formData.password} onChange={e => handleChange('password', e.target.value)} required />
                    </>
                )}
            </AddItemModal>
        </div>
    );
};

const SettingsPage = ({ features }) => {
    const { user } = useAuth();
    const { getCompanyConfig, updateCompanyConfig } = useConfig();
    const { addToast } = useNotification();
    const [config, setConfig] = useState(() => getCompanyConfig(user.companyId));
    
    const tabs = [
        { id: 'form', label: 'Formulario', icon: <FileText className="w-5 h-5"/>, feature: 'constructorFormularios' },
        { id: 'timeline', label: 'Línea de Tiempo', icon: <Clock className="w-5 h-5"/>, feature: 'constructorLineasTiempo' },
        { id: 'measures', label: 'Medidas', icon: <Shield className="w-5 h-5" />, feature: 'medidasPorDefecto' },
    ];

    const visibleTabs = tabs.filter(tab => features && features[tab.feature]);
    const [activeTab, setActiveTab] = useState(visibleTabs[0]?.id || '');
    
    const handleSave = () => {
        updateCompanyConfig(user.companyId, config);
        addToast("Configuración guardada con éxito.", "success");
    };
    
    useEffect(() => {
        if(visibleTabs.length > 0 && !visibleTabs.find(t => t.id === activeTab)) {
            setActiveTab(visibleTabs[0].id)
        }
    },[visibleTabs, activeTab]);

    return (
        <div className="space-y-6">
             <div className="flex justify-between items-center">
                <h1 className="text-2xl font-bold text-slate-800">Configuración</h1>
                <div className="flex items-center gap-2">
                    <Button onClick={handleSave} variant="primary">
                        Guardar Cambios
                    </Button>
                </div>
            </div>
            
            <div className="border-b border-slate-200">
                <nav className="-mb-px flex space-x-6 overflow-x-auto">
                    {visibleTabs.map(tab => (
                        <button key={tab.id} onClick={() => setActiveTab(tab.id)}
                            className={`flex items-center gap-2 py-3 px-1 border-b-2 text-sm font-medium ${activeTab === tab.id ? 'border-indigo-500 text-indigo-600' : 'border-transparent text-slate-500 hover:text-slate-700 hover:border-slate-300'}`}
                        >
                            {tab.icon}
                            {tab.label}
                        </button>
                    ))}
                </nav>
            </div>
            
            {activeTab === 'form' && features.constructorFormularios && <FormSettings config={config} setConfig={setConfig} />}
            {activeTab === 'timeline' && features.constructorLineasTiempo && <TimelineSettings config={config} setConfig={setConfig} />}
            {activeTab === 'measures' && features.medidasPorDefecto && <MeasuresSettings config={config} setConfig={setConfig} />}
        </div>
    );
};

const FormSettings = ({ config, setConfig }) => {
    // Handlers for form builder
    const handleStepChange = (stepIndex, field, value) => {
        const newSteps = [...config.formSteps];
        newSteps[stepIndex][field] = value;
        setConfig(prev => ({...prev, formSteps: newSteps}));
    };

    const addStep = () => {
        const newStep = { id: uuidv4(), title: 'Nuevo Paso', description: '', fields: [] };
        setConfig(prev => ({...prev, formSteps: [...prev.formSteps, newStep]}));
    };

    const addField = (stepIndex) => {
        const newField = { id: uuidv4(), label: 'Nuevo Campo', type: 'text', dataKey: `custom.${uuidv4()}`, required: false, editableOnManage: true };
        const newSteps = [...config.formSteps];
        newSteps[stepIndex].fields.push(newField);
        setConfig(prev => ({...prev, formSteps: newSteps}));
    };
    
    const handleFieldChange = (stepIndex, fieldIndex, prop, value) => {
         const newSteps = [...config.formSteps];
         let field = { ...newSteps[stepIndex].fields[fieldIndex] };
         field[prop] = value;
         
         if (prop === 'type' && (value !== 'select' && value !== 'checkbox' && value !== 'radio')) {
            delete field.options;
         } else if(prop === 'type' && (value === 'select' || value === 'checkbox' || value === 'radio')) {
            field.options = field.options || [];
         }
         newSteps[stepIndex].fields[fieldIndex] = field;
         setConfig(prev => ({...prev, formSteps: newSteps}));
    };
    
    const removeField = (stepIndex, fieldIndex) => {
        const newSteps = [...config.formSteps];
        newSteps[stepIndex].fields.splice(fieldIndex, 1);
        setConfig(prev => ({...prev, formSteps: newSteps}));
    }

    return (
        <div className="space-y-4">
             {config.formSteps.map((step, stepIndex) => (
                <Card key={step.id}>
                    <div className="space-y-2 mb-4">
                       <Input label="Título del Paso" id={`step-title-${step.id}`} value={step.title} onChange={e => handleStepChange(stepIndex, 'title', e.target.value)} />
                       <Input label="Descripción del Paso" id={`step-desc-${step.id}`} value={step.description} onChange={e => handleStepChange(stepIndex, 'description', e.target.value)} />
                    </div>

                    <h4 className="font-semibold text-slate-700 mb-2">Campos del Paso:</h4>
                    <div className="space-y-3">
                        {step.fields.map((field, fieldIndex) => (
                            <div key={field.id} className="p-4 border rounded-md bg-slate-50 space-y-4">
                               <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                 <Input label="Etiqueta" id={`field-label-${field.id}`} value={field.label} onChange={e => handleFieldChange(stepIndex, fieldIndex, 'label', e.target.value)} />
                                 <Input label="Descripción (ayuda)" id={`field-desc-${field.id}`} value={field.description || ''} onChange={e => handleFieldChange(stepIndex, fieldIndex, 'description', e.target.value)} />
                                 <Select label="Tipo" id={`field-type-${field.id}`} value={field.type} onChange={e => handleFieldChange(stepIndex, fieldIndex, 'type', e.target.value)}>
                                    <option value="text">Texto Corto</option>
                                    <option value="textarea">Texto Largo</option>
                                    <option value="email">Email</option>
                                    <option value="tel">Teléfono</option>
                                    <option value="date">Fecha</option>
                                    <option value="radio">Selección Única (Radio)</option>
                                    <option value="rut">RUT (Autoformateado)</option>
                                    <option value="witnesses">Testigos Dinámicos</option>
                                    <option value="documents">Documentos Múltiples</option>
                                    <option value="accusedPersons">Personas Denunciadas</option>
                                </Select>
                                 <div className="flex items-end gap-4">
                                     <label className="flex items-center gap-2 text-sm text-slate-600 pt-6"><input type="checkbox" checked={field.required} onChange={e => handleFieldChange(stepIndex, fieldIndex, 'required', e.target.checked)} /> Requerido</label>
                                     <label className="flex items-center gap-2 text-sm text-slate-600 pt-6"><input type="checkbox" checked={field.editableOnManage} onChange={e => handleFieldChange(stepIndex, fieldIndex, 'editableOnManage', e.target.checked)} /> Editable</label>
                                      <Button variant="danger" onClick={() => removeField(stepIndex, fieldIndex)} className="p-2 ml-auto">
                                        <Trash className="w-4 h-4"/>
                                      </Button>
                                 </div>
                               </div>
                                {(field.type === 'radio') && (
                                    <TextArea
                                        label="Opciones (una por línea)"
                                        value={Array.isArray(field.options) ? field.options.join('\n') : ''}
                                        onChange={e => handleFieldChange(stepIndex, fieldIndex, 'options', e.target.value.split('\n'))}
                                    />
                                )}
                            </div>
                        ))}
                    </div>
                    <Button onClick={() => addField(stepIndex)} variant="secondary" className="mt-4"><Plus className="w-4 h-4"/>Añadir Campo</Button>
                </Card>
             ))}
             <Button onClick={addStep}><Plus className="w-4 h-4"/>Añadir Paso</Button>
        </div>
    )
};

const TimelineSettings = ({ config, setConfig }) => {
    const [activeTimeline, setActiveTimeline] = useState('interna');

    const handleStageChange = (timelineType, index, field, value) => {
        const newTimelines = { ...config.timelineSettings };
        const newStages = [...newTimelines[timelineType]];
        newStages[index] = { ...newStages[index], [field]: field === 'duration' ? parseInt(value, 10) || 0 : value };
        setConfig(prev => ({...prev, timelineSettings: {...prev.timelineSettings, [timelineType]: newStages}}));
    };
    
    const handleSubStepChange = (timelineType, stageIndex, subStepIndex, field, value) => {
        const newTimelines = { ...config.timelineSettings };
        const newStages = [...newTimelines[timelineType]];
        const newSubSteps = [...newStages[stageIndex].subSteps];
        newSubSteps[subStepIndex] = {...newSubSteps[subStepIndex], [field]: field === 'duration' ? (value === '' ? null : parseInt(value, 10) || 0) : value };
        newStages[stageIndex] = {...newStages[stageIndex], subSteps: newSubSteps};
        setConfig(prev => ({...prev, timelineSettings: {...prev.timelineSettings, [timelineType]: newStages}}));
    };

    const addSubStep = (timelineType, stageIndex) => {
        const newTimelines = { ...config.timelineSettings };
        const stage = newTimelines[timelineType][stageIndex];
        const newSubSteps = [...(stage.subSteps || []), {id: uuidv4(), name: "Nueva sub-etapa", duration: 1, dayType: 'habiles-administrativos'}];
        handleStageChange(timelineType, stageIndex, 'subSteps', newSubSteps);
    };

    const removeSubStep = (timelineType, stageIndex, subStepIndex) => {
        const newTimelines = { ...config.timelineSettings };
        const stage = newTimelines[timelineType][stageIndex];
        const newSubSteps = stage.subSteps.filter((_, i) => i !== subStepIndex);
        handleStageChange(timelineType, stageIndex, 'subSteps', newSubSteps);
    };

    const addStage = (timelineType) => {
        const newStage = { id: uuidv4(), name: 'Nueva Etapa', duration: 5, dayType: 'habiles-administrativos', countFrom: 'previous-stage-end' };
        setConfig(prev => ({...prev, timelineSettings: {...prev.timelineSettings, [timelineType]: [...(prev.timelineSettings[timelineType] || []), newStage]}}));
    };

    const removeStage = (timelineType, index) => {
        const newStages = config.timelineSettings[timelineType].filter((_, i) => i !== index);
        setConfig(prev => ({...prev, timelineSettings: {...prev.timelineSettings, [timelineType]: newStages}}));
    };

    const timelineTypes = [
        {id: 'interna', label: 'Investigación Interna'},
        {id: 'derivada', label: 'Derivada a DT'},
        {id: 'notificada', label: 'Notificada por DT'}
    ];

    const currentTimelineStages = config.timelineSettings[activeTimeline] || [];
    
    return (
        <Card>
            <div className="flex border-b mb-4 overflow-x-auto">
            {timelineTypes.map(type => (
                 <button key={type.id} onClick={() => setActiveTimeline(type.id)} className={`flex-shrink-0 px-4 py-2 text-sm font-medium ${activeTimeline === type.id ? 'border-b-2 border-indigo-500 text-indigo-600' : 'text-slate-500 hover:text-slate-700'}`}>
                    {type.label}
                 </button>
            ))}
            </div>
            
            <h3 className="text-lg font-semibold text-slate-800 mb-4">Etapas del Proceso: {timelineTypes.find(t => t.id === activeTimeline).label}</h3>
            <div className="space-y-4">
                {currentTimelineStages.map((stage, index) => {
                    return (
                        <div key={stage.id} className="p-4 border rounded-lg bg-slate-50 space-y-3">
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-3">
                                <div className="xl:col-span-2"><Input label="Nombre Etapa" value={stage.name} onChange={e => handleStageChange(activeTimeline, index, 'name', e.target.value)} /></div>
                                <div><Input label="Plazo Total (días)" type="number" value={stage.duration} onChange={e => handleStageChange(activeTimeline, index, 'duration', e.target.value)} /></div>
                                <div><Select label="Tipo de Días" value={stage.dayType} onChange={e => handleStageChange(activeTimeline, index, 'dayType', e.target.value)}>
                                    <option value="corridos">Corridos</option> <option value="habiles-administrativos">Hábiles Admin.</option>
                                </Select></div>
                                <div><Select label="Contar desde" value={stage.countFrom} onChange={e => handleStageChange(activeTimeline, index, 'countFrom', e.target.value)}>
                                    <option value="case-start">Inicio del Caso</option><option value="previous-stage-end">Fin Etapa Anterior</option>
                                    <option value="complaint-date">Fecha Denuncia (DT)</option><option value="reception-date">Fecha Recepción (DT)</option>
                                    <option value="day-zero">Día Cero (DT)</option>
                                </Select></div>
                                <div className="flex items-end">
                                    <Button variant="danger" onClick={() => removeStage(activeTimeline, index)}>
                                        <Trash className="w-4 h-4"/>
                                    </Button>
                                </div>
                            </div>
                             <div className="pl-4 border-l-2 border-slate-300">
                                <h4 className="text-sm font-semibold text-slate-600 mb-2">Sub-etapas</h4>
                                <div className="space-y-2">
                                    {(stage.subSteps || []).map((sub, subIndex) => (
                                        <div key={sub.id || subIndex} className="flex items-center gap-2">
                                            <Input className="flex-1" placeholder="Nombre sub-etapa" value={sub.name} onChange={e => handleSubStepChange(activeTimeline, index, subIndex, 'name', e.target.value)} />
                                            <Button variant="ghost" className="p-1 h-auto" onClick={() => removeSubStep(activeTimeline, index, subIndex)}><Trash className="w-4 h-4 text-red-500" /></Button>
                                        </div>
                                    ))}
                                </div>
                                <Button onClick={() => addSubStep(activeTimeline, index)} variant="ghost" className="text-xs mt-2"><Plus className="w-3 h-3"/>Añadir Sub-etapa</Button>
                            </div>
                        </div>
                    );
                })}
            </div>
            <Button onClick={() => addStage(activeTimeline)} variant="secondary" className="mt-4"><Plus className="w-4 h-4"/>Añadir Etapa</Button>
        </Card>
    );
};

const MeasuresSettings = ({ config, setConfig }) => {
    const [newMeasure, setNewMeasure] = useState('');

    const handleAddMeasure = (e) => {
        e.preventDefault();
        if (newMeasure.trim()) {
            const updatedMeasures = [...(config.defaultSafeguardMeasures || []), newMeasure];
            setConfig(prev => ({ ...prev, defaultSafeguardMeasures: updatedMeasures }));
            setNewMeasure('');
        }
    };
    
    const handleRemoveMeasure = (index) => {
        const updatedMeasures = [...config.defaultSafeguardMeasures];
        updatedMeasures.splice(index, 1);
        setConfig(prev => ({...prev, defaultSafeguardMeasures: updatedMeasures }));
    };

    return (
        <Card>
            <h3 className="text-lg font-semibold text-slate-800 mb-2">Medidas de Resguardo por Defecto</h3>
            <p className="text-sm text-slate-500 mb-4">Estas medidas se sugerirán al crear una nueva medida en un caso.</p>
            <form onSubmit={handleAddMeasure} className="flex gap-2 mb-4">
                <Input placeholder="Nueva medida por defecto..." value={newMeasure} onChange={e => setNewMeasure(e.target.value)} />
                <Button type="submit">Añadir</Button>
            </form>
            <div className="space-y-2">
                {(config.defaultSafeguardMeasures || []).map((measure, index) => (
                    <div key={index} className="flex justify-between items-center bg-slate-100 p-2 rounded-md">
                        <p className="text-sm">{measure}</p>
                        <Button variant="ghost" className="p-1 h-auto" onClick={() => handleRemoveMeasure(index)}><Trash className="w-4 h-4 text-red-500"/></Button>
                    </div>
                ))}
            </div>
        </Card>
    );
};


// ===============================================================================================
// PORTAL: BOSS
// ===============================================================================================

const BossPortal = () => {
    const view = window.location.hash.split('/')[1] || 'dashboard';

    let content;
    if(view === 'plans') {
        content = <PlanManagementPage />
    } else if (view === 'settings') {
        content = <BossSettingsPage />;
    } else {
        content = <BossDashboard />;
    }

    return (
        <div className="min-h-screen bg-slate-100 p-8">
            <div className="max-w-7xl mx-auto">
                 {content}
            </div>
        </div>
    );
};

const BossDashboard = () => {
    const { logout } = useAuth();
    const { companies, users: allUsers, complaints, plans } = useData();

    const globalStats = useMemo(() => {
        if (!companies || !allUsers || !complaints) return { totalCompanies: 0, totalUsers: 0, activeComplaints: 0 };
        const totalCompanies = companies.length;
        const totalUsers = allUsers.filter(u => u.role !== 'boss').length;
        const activeComplaints = complaints.filter(c => c.status !== 'Cerrada').length;
        return { totalCompanies, totalUsers, activeComplaints };
    }, [companies, allUsers, complaints]);
    
    const companiesByPlanData = useMemo(() => {
        if (!companies || !plans) return [];
        const counts = companies.reduce((acc, company) => {
            const plan = plans.find(p => p.id === company.planId);
            const planName = plan ? plan.name : 'Sin Plan';
            acc[planName] = (acc[planName] || 0) + 1;
            return acc;
        }, {});
        return Object.entries(counts).map(([label, value]) => ({ label, value }));
    }, [companies, plans]);

    const complaintsByStatusData = useMemo(() => {
         if (!complaints) return [];
         const counts = complaints.reduce((acc, c) => {
            acc[c.status] = (acc[c.status] || 0) + 1;
            return acc;
        }, {});
        return Object.entries(counts).map(([label, value]) => ({ label, value }));
    }, [complaints]);
    
    return (
        <>
            <div className="flex justify-between items-center mb-6">
                <h1 className="text-2xl font-bold text-slate-800">Panel Super-Admin</h1>
                <div className="flex items-center gap-4">
                   <a href="#boss/plans">
                       <Button variant="secondary"><Package className="w-4 h-4"/>Planes</Button>
                   </a>
                   <a href="#boss/settings">
                       <Button variant="secondary"><Building className="w-4 h-4"/>Empresas</Button>
                   </a>
                   <Button onClick={logout} variant="secondary">
                       <LogOut className="w-4 h-4"/>Cerrar Sesión
                   </Button>
                </div>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
                <KPIStat title="Total Empresas" value={globalStats.totalCompanies} icon={<Building className="w-6 h-6"/>}/>
                <KPIStat title="Total Usuarios" value={globalStats.totalUsers} icon={<Users className="w-6 h-6"/>}/>
                <KPIStat title="Denuncias Activas" value={globalStats.activeComplaints} icon={<AlertCircle className="w-6 h-6"/>}/>
            </div>
             <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <BarChart title="Empresas por Plan" data={companiesByPlanData} colors={['#818cf8', '#6366f1']} />
                <BarChart title="Denuncias por Estado (Global)" data={complaintsByStatusData} colors={['#38bdf8', '#f59e0b', '#10b981']} />
            </div>
        </>
    );
};

const PlanManagementPage = () => {
    const { plans, setPlans } = useData();
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingPlan, setEditingPlan] = useState(null);

    const handleOpenModal = (plan = null) => {
        setEditingPlan(plan);
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setEditingPlan(null);
        setIsModalOpen(false);
    };

    const handleSavePlan = (planData) => {
        setPlans(prevPlans => {
            if (editingPlan) {
                return prevPlans.map(p => p.id === editingPlan.id ? {...planData, id: editingPlan.id } : p);
            }
            return [...prevPlans, { ...planData, id: `plan-${uuidv4()}` }];
        });
        handleCloseModal();
    };
    
    return (
        <div className="space-y-6">
             <div className="flex justify-between items-center">
                <div>
                     <a href="#boss/dashboard" className="text-indigo-600 hover:underline text-sm flex items-center gap-1">
                        <ChevronLeft className="w-4 h-4"/> Volver al Dashboard
                    </a>
                    <h1 className="text-2xl font-bold text-slate-800 mt-1">Gestión de Planes</h1>
                </div>
                <Button onClick={() => handleOpenModal()} variant="primary">
                    <Plus className="w-4 h-4"/> Crear Plan
                </Button>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {plans.map(plan => (
                    <Card key={plan.id} className="flex flex-col">
                        <div className="flex-1">
                            <h3 className="text-lg font-semibold text-indigo-700">{plan.name}</h3>
                            <ul className="mt-4 space-y-2 text-sm">
                                {allFeatures.flatMap(s => s.features).map(feature => (
                                     <li key={feature.key} className="flex items-center gap-2">
                                        {plan.features[feature.key] ? <CheckCircle className="w-4 h-4 text-emerald-500"/> : <XCircle className="w-4 h-4 text-red-500"/>}
                                        <span>{feature.label}</span>
                                     </li>
                                ))}
                            </ul>
                        </div>
                        <div className="mt-6 flex justify-end">
                            <Button variant="secondary" onClick={() => handleOpenModal(plan)}>
                                <Edit className="w-4 h-4"/> Editar
                            </Button>
                        </div>
                    </Card>
                ))}
            </div>
            {isModalOpen && (
                <PlanModal 
                    isOpen={isModalOpen}
                    onClose={handleCloseModal}
                    onSave={handleSavePlan}
                    plan={editingPlan}
                />
            )}
        </div>
    );
};

const PlanModal = ({ isOpen, onClose, onSave, plan }) => {
    const [name, setName] = useState('');
    const [features, setFeatures] = useState(defaultFeaturesState);

    useEffect(() => {
        if(plan) {
            setName(plan.name);
            setFeatures({...defaultFeaturesState, ...plan.features});
        } else {
            setName('');
            setFeatures(defaultFeaturesState);
        }
    }, [plan]);

    const handleFeatureChange = (featureKey) => {
        setFeatures(prev => ({...prev, [featureKey]: !prev[featureKey]}));
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        onSave({ name, features });
    };
    
    return (
        <Modal isOpen={isOpen} onClose={onClose} title={plan ? 'Editar Plan' : 'Crear Nuevo Plan'}>
            <form onSubmit={handleSubmit} className="space-y-4">
                <Input label="Nombre del Plan" value={name} onChange={e => setName(e.target.value)} required />
                <div className="space-y-4">
                    {allFeatures.map(section => (
                        <div key={`${section.section}-${section.module}`}>
                            <h4 className="font-semibold text-slate-800 border-b pb-1 mb-2">{section.section} - {section.module}</h4>
                             <div className="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2">
                                {section.features.map(feature => (
                                    <label key={feature.key} className="flex items-center gap-2 text-sm p-2 hover:bg-slate-50 rounded-md">
                                        <input type="checkbox" checked={features[feature.key] || false} onChange={() => handleFeatureChange(feature.key)} />
                                        <span>{feature.label}</span>
                                        <Tooltip text={feature.description}>
                                            <Info className="w-3.5 h-3.5 text-slate-400"/>
                                        </Tooltip>
                                    </label>
                                ))}
                             </div>
                        </div>
                    ))}
                </div>
                <div className="flex justify-end gap-2 mt-4 pt-4 border-t">
                    <Button type="button" onClick={onClose} variant="secondary">Cancelar</Button>
                    <Button type="submit" variant="primary">Guardar</Button>
                </div>
            </form>
        </Modal>
    );
};


const BossSettingsPage = () => {
    return (
        <div className="space-y-6">
            <a href="#boss/dashboard" className="text-indigo-600 hover:underline text-sm flex items-center gap-1">
                <ChevronLeft className="w-4 h-4"/> Volver al Dashboard
            </a>
            <h1 className="text-2xl font-bold text-slate-800">Configuración Global</h1>
            <CompanyManagementPage />
        </div>
    );
};

const CompanyManagementPage = ({ onCancel, onCreate }) => {
    const { companies, plans, setCompanies } = useData();
    const { allUsers, setAllUsers } = useAuth();
    const { addToast } = useNotification();
    const { updateCompanyConfig } = useConfig();
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [editingCompany, setEditingCompany] = useState(null);

    const handleCreateCompany = (newCompanyData) => {
        const companyId = `empresa-${uuidv4().split('-')[0]}`;
        
        const newCompany = {
            id: companyId,
            status: 'oculto',
            name: newCompanyData.name,
            legalName: newCompanyData.legalName,
            rut: newCompanyData.rut,
            abbreviation: newCompanyData.abbreviation,
            address: newCompanyData.address,
            planId: newCompanyData.planId,
            commercialContact: newCompanyData.commercialContact,
            adminEmail: newCompanyData.adminEmail,
        };
        
        const newAdminUser = {
            uid: uuidv4(),
            email: newCompanyData.adminEmail,
            password: newCompanyData.password,
            role: 'admin',
            companyId: companyId,
            name: newCompanyData.adminName,
            rut: newCompanyData.adminRut,
            position: newCompanyData.adminPosition,
            phone: newCompanyData.adminPhone
        };
        
        setCompanies(prev => [...prev, newCompany]);
        setAllUsers(prev => [...prev, newAdminUser]);
        updateCompanyConfig(companyId, defaultConfig); 
        addToast("Empresa y Admin creados con éxito", "success");
        setCreateModalOpen(false);
    };

    return (
        <>
            <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-slate-800">Listado de Empresas</h3>
                <Button onClick={() => setCreateModalOpen(true)} variant="primary">
                    <Plus className="w-4 h-4"/> Crear Empresa
                </Button>
            </div>
            <Card className="p-0 overflow-x-auto">
                 <table className="w-full text-sm text-left text-slate-500">
                    <thead className="text-xs text-slate-700 uppercase bg-slate-50">
                        <tr>
                            <th scope="col" className="px-6 py-3">Nombre</th>
                            <th scope="col" className="px-6 py-3">RUT</th>
                            <th scope="col" className="px-6 py-3">Plan</th>
                            <th scope="col" className="px-6 py-3">Estado</th>
                        </tr>
                    </thead>
                    <tbody>
                        {companies.map(c => (
                            <tr key={c.id} className="bg-white border-b hover:bg-slate-50 cursor-pointer" onClick={() => setEditingCompany(c)}>
                                <td className="px-6 py-4 font-medium text-slate-900">{c.name}</td>
                                <td className="px-6 py-4">{c.rut}</td>
                                <td className="px-6 py-4">{plans.find(p => p.id === c.planId)?.name || 'N/A'}</td>
                                <td className="px-6 py-4 capitalize">{c.status}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </Card>

            <CreateCompanyModal 
                isOpen={isCreateModalOpen} 
                onClose={() => setCreateModalOpen(false)} 
                onSubmit={handleCreateCompany}
            />
            {editingCompany && <CompanyEditPanel company={editingCompany} onClose={() => setEditingCompany(null)} />}
        </>
    );
};

const CompanyForm = ({ data, onDataChange, isCreate = false }) => {
    const { plans } = useData();
    return (
        <>
            <div>
                <h4 className="text-md font-semibold text-indigo-700 mb-3 border-b pb-2">Datos de la Empresa</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <Input label="Razón Social" value={data.legalName || ''} onChange={e => onDataChange('legalName', e.target.value)} required />
                    <Input label="Nombre de Fantasía" value={data.name || ''} onChange={e => onDataChange('name', e.target.value)} required />
                    <RutInput label="RUT Empresa" value={data.rut || ''} onChange={e => onDataChange('rut', e.target.value)} required />
                    <Input label="Abreviación" value={data.abbreviation || ''} onChange={e => onDataChange('abbreviation', e.target.value)} />
                    <Input label="Dirección" value={data.address || ''} onChange={e => onDataChange('address', e.target.value)} className="md:col-span-2" />
                    <Select label="Plan Comercial" value={data.planId || ''} onChange={e => onDataChange('planId', e.target.value)}>
                        {plans.map(p => <option key={p.id} value={p.id}>{p.name}</option>)}
                    </Select>
                    {!isCreate && (
                        <Select label="Estado" value={data.status} onChange={e => onDataChange('status', e.target.value)}>
                            <option value="activo">Activo</option> <option value="oculto">Oculto</option> <option value="inactivo">Inactivo</option>
                        </Select>
                    )}
                </div>
            </div>
            <div>
                <h4 className="text-md font-semibold text-indigo-700 mb-3 border-b pb-2">Contacto Comercial</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <Input label="Nombre Completo" value={data.commercialContact?.name || ''} onChange={e => onDataChange('commercialContact.name', e.target.value)} />
                    <RutInput label="RUT" value={data.commercialContact?.rut || ''} onChange={e => onDataChange('commercialContact.rut', e.target.value)} />
                    <Input label="Cargo" value={data.commercialContact?.position || ''} onChange={e => onDataChange('commercialContact.position', e.target.value)} />
                    <Input label="Teléfono" value={data.commercialContact?.phone || ''} onChange={e => onDataChange('commercialContact.phone', e.target.value)} />
                    <Input label="Email de Contacto" type="email" value={data.commercialContact?.email || ''} onChange={e => onDataChange('commercialContact.email', e.target.value)} />
                </div>
            </div>
        </>
    )
};

const CompanyEditPanel = ({ company, onClose }) => {
    const { updateCompany } = useData();
    const { allUsers, setAllUsers } = useAuth();
    const { addToast } = useNotification();
    
    const [companyData, setCompanyData] = useState(company);
    const [isAddingAdmin, setIsAddingAdmin] = useState(false);
    const [adminToDelete, setAdminToDelete] = useState(null);

    useEffect(() => { setCompanyData(company); }, [company]);

    const companyAdmins = allUsers.filter(u => u.companyId === company.id && u.role === 'admin');

    const handleSave = () => {
        updateCompany(company.id, companyData);
        onClose();
    };
    
    const handleDataChange = (path, value) => {
        setCompanyData(prev => {
            const newState = JSON.parse(JSON.stringify(prev));
            setNestedValue(newState, path, value);
            return newState;
        })
    }
    
    const handleAddAdmin = (newAdminData) => {
        const newAdmin = { ...newAdminData, uid: uuidv4(), companyId: company.id, role: 'admin' };
        setAllUsers(prev => [...prev, newAdmin]);
        addToast("Nuevo administrador añadido.", "success");
        setIsAddingAdmin(false);
    };
    
    const handleConfirmDeleteAdmin = () => {
        if (!adminToDelete) return;
        setAllUsers(prevUsers => prevUsers.filter(u => u.uid !== adminToDelete.uid));
        addToast("Administrador eliminado con éxito", "success");
        setAdminToDelete(null);
    };

    return (
        <Modal isOpen={true} onClose={onClose} title={`Editando: ${company.name}`}>
            <div className="space-y-6">
               <Card>
                  <CompanyForm data={companyData} onDataChange={handleDataChange} />
               </Card>
               <Card>
                    <div className="flex justify-between items-center mb-3">
                        <h4 className="text-md font-semibold text-indigo-700">Administradores de la Empresa</h4>
                        <Button variant="secondary" onClick={() => setIsAddingAdmin(!isAddingAdmin)}><Plus className="w-4 h-4"/>Añadir Admin</Button>
                    </div>
                     <ul className="divide-y divide-slate-200">
                        {companyAdmins.map(admin => (
                            <li key={admin.uid} className="py-2 flex justify-between items-center">
                                <div><p className="font-semibold text-sm">{admin.name}</p><p className="text-xs text-slate-500">{admin.email}</p></div>
                                <Button variant="ghost" className="p-1 h-auto text-red-500 hover:bg-red-100" onClick={() => setAdminToDelete(admin)}><Trash className="w-4 h-4"/></Button>
                            </li>
                        ))}
                    </ul>
                </Card>
                {isAddingAdmin && <Card><h4 className="text-md font-semibold text-indigo-700 mb-3">Nuevo Administrador</h4><CreateAdminForm onCancel={() => setIsAddingAdmin(false)} onCreate={handleAddAdmin} /></Card>}
                 <div className="flex justify-end gap-3 pt-4 border-t">
                    <Button type="button" onClick={onClose} variant="secondary">Cerrar</Button>
                    <Button type="button" variant="primary" onClick={handleSave}>Guardar Cambios</Button>
                </div>
            </div>
            {adminToDelete && <ConfirmationModal isOpen={!!adminToDelete} onClose={() => setAdminToDelete(null)} onConfirm={handleConfirmDeleteAdmin} title="Confirmar Eliminación">
                <p>¿Está seguro que desea eliminar al administrador <span className="font-bold">{adminToDelete.name}</span>? Esta acción no se puede deshacer.</p>
            </ConfirmationModal>}
        </Modal>
    );
};


const CreateAdminForm = ({ onCancel, onCreate }) => {
    const [adminData, setAdminData] = useState({});
    const { addToast } = useNotification();
    const handleAdminChange = (field, value) => setAdminData(prev => ({...prev, [field]: value}));

    const handleSubmit = (e) => {
        e.preventDefault();
        if (!adminData.name || !adminData.email || !adminData.password) {
            addToast("Nombre, Email y Contraseña son requeridos para el admin.", "error");
            return;
        }
        onCreate(adminData);
    };

    return (
        <form onSubmit={handleSubmit} className="space-y-4 pt-4 border-t">
             <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Input label="Nombre Completo" value={adminData.name || ''} onChange={e => handleAdminChange('name', e.target.value)} required />
                <RutInput label="RUT" value={adminData.rut || ''} onChange={e => handleAdminChange('rut', e.target.value)} />
                <Input label="Cargo" value={adminData.position || ''} onChange={e => handleAdminChange('position', e.target.value)} />
                <Input label="Teléfono" value={adminData.phone || ''} onChange={e => handleAdminChange('phone', e.target.value)} />
                <Input label="Email (para login)" type="email" value={adminData.email || ''} onChange={e => handleAdminChange('email', e.target.value)} required />
                <Input label="Contraseña" type="password" value={adminData.password || ''} onChange={e => handleAdminChange('password', e.target.value)} required />
            </div>
             <div className="flex justify-end gap-3 pt-4">
                <Button type="button" onClick={onCancel} variant="secondary">Cancelar</Button>
                <Button type="submit" variant="primary">Crear Administrador</Button>
            </div>
        </form>
    )
}

const CreateCompanyModal = ({ isOpen, onClose, onSubmit }) => {
    const { plans } = useData();
    const [companyData, setCompanyData] = useState({});
    
    useEffect(() => {
        if (isOpen) {
            setCompanyData({ planId: (plans && plans.length > 0) ? plans[0].id : '' });
        }
    }, [isOpen, plans]);

    const handleChange = (path, value) => {
        setCompanyData(prev => {
            const newState = JSON.parse(JSON.stringify(prev));
            setNestedValue(newState, path, value);
            return newState;
        });
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        onSubmit(companyData);
        onClose();
    };

    return (
        <Modal isOpen={isOpen} onClose={onClose} title="Crear Nueva Empresa">
            <form onSubmit={handleSubmit} className="space-y-6">
                <CompanyForm data={companyData} onDataChange={handleChange} isCreate={true} />
                <div>
                    <h4 className="text-md font-semibold text-indigo-700 mb-3 border-b pb-2">Administrador Inicial</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <Input label="Nombre Completo" value={companyData.adminName || ''} onChange={e => handleChange('adminName', e.target.value)} required />
                        <RutInput label="RUT" value={companyData.adminRut || ''} onChange={e => handleChange('adminRut', e.target.value)} />
                        <Input label="Cargo" value={companyData.adminPosition || ''} onChange={e => handleChange('adminPosition', e.target.value)} />
                        <Input label="Teléfono" value={companyData.adminPhone || ''} onChange={e => handleChange('adminPhone', e.target.value)} />
                         <Input label="Email (para login)" type="email" value={companyData.adminEmail || ''} onChange={e => handleChange('adminEmail', e.target.value)} required />
                        <Input label="Contraseña" type="password" value={companyData.password || ''} onChange={e => handleChange('password', e.target.value)} required />
                    </div>
                </div>
                <div className="flex justify-end gap-3 pt-4 border-t">
                    <Button type="button" onClick={onClose} variant="secondary">Cancelar</Button>
                    <Button type="submit" variant="primary">Crear Empresa y Admin</Button>
                </div>
            </form>
        </Modal>
    );
};


// ===============================================================================================
// MAIN APP COMPONENT & ROUTER
// ===============================================================================================

const LoginScreen = () => {
    const { login } = useAuth();
    const { companies } = useData();
    const { addToast } = useNotification();
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');

    const handleLogin = (e) => {
        e.preventDefault();
        const loggedInUser = login(email, password);
        if (loggedInUser) {
            if (loggedInUser.role === 'admin' || loggedInUser.role === 'investigador') {
                const company = companies.find(c => c.id === loggedInUser.companyId);
                if (company?.status === 'inactivo') {
                    addToast('La empresa se encuentra inactiva. Contacte al administrador.', 'error');
                    return;
                }
            }
            if (loggedInUser.role === 'boss') {
                window.location.hash = '#boss/dashboard';
            } else {
                window.location.hash = '#admin';
            }
        }
    };

    return (
        <div className="min-h-screen bg-slate-100 flex items-center justify-center p-4">
            <div className="w-full max-w-sm">
                <div className="text-center mb-6">
                    <Briefcase className="inline-block w-12 h-12 text-indigo-600"/>
                    <h1 className="text-2xl font-bold text-slate-800">Acceso a Plataforma</h1>
                </div>
                <Card>
                    <form onSubmit={handleLogin} className="space-y-4">
                        <Input label="Correo Electrónico" id="email" type="email" value={email} onChange={(e) => setEmail(e.target.value)} placeholder="usted@ejemplo.com" required />
                        <Input label="Contraseña" id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} required />
                        <Button type="submit" className="w-full justify-center">
                           <LogIn className="w-5 h-5"/> Ingresar
                        </Button>
                    </form>
                    <div className="mt-4 text-center">
                        <a href="#public" className="text-sm text-indigo-600 hover:underline">Volver al portal público</a>
                    </div>
                </Card>
            </div>
        </div>
    )
}

function App() {
    const [hash, setHash] = useState(window.location.hash);
    const { user } = useAuth();

    useEffect(() => {
        const handleHashChange = () => setHash(window.location.hash || '#public');
        window.addEventListener('hashchange', handleHashChange);
        handleHashChange(); // Set initial hash
        return () => window.removeEventListener('hashchange', handleHashChange);
    }, []);
    
    const RenderedPortal = useMemo(() => {
        const portal = hash.split('/')[0] || '#public';
        
        if (user) {
            if (user.role === 'boss' && portal !== '#boss') {
                window.location.hash = '#boss/dashboard';
                return <BossPortal />;
            }
            if ((user.role === 'admin' || user.role === 'investigador') && portal !== '#admin') {
                window.location.hash = '#admin';
                return <AdminPortal />;
            }
        }

        switch (portal) {
            case '#admin':
                return user ? <AdminPortal /> : <LoginScreen />;
            case '#boss':
                return user && user.role === 'boss' ? <BossPortal /> : <LoginScreen />;
            case '#public':
            default:
                return <PublicPortal />;
        }
    }, [hash, user]);

    return RenderedPortal;
}

export default function AppWrapper() {
  return (
    <NotificationProvider>
        <DataProvider>
            <ConfigProvider>
                <AuthProvider>
                    <App />
                </AuthProvider>
            </ConfigProvider>
        </DataProvider>
    </NotificationProvider>
  );
}
